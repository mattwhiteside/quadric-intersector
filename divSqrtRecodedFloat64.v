/*
This combined division/sqrt unit is from UC Berkeley's
hard float repo and was auto-generated by chisel.

https://github.com/ucb-bar/berkeley-hardfloat/blob/master/src/main/scala/divSqrtRecodedFloat64.scala

*/




module divSqrtRecodedFloat64_mulAddZ31(input clk, input reset,
    output io_inReady_div,
    output io_inReady_sqrt,
    input  io_inValid,
    input  io_sqrtOp,
    input [64:0] io_a,
    input [64:0] io_b,
    input [1:0] io_roundingMode,
    output io_outValid_div,
    output io_outValid_sqrt,
    output[64:0] io_out,
    output[4:0] io_exceptionFlags,
    output[3:0] io_usingMulAdd,
    output io_latchMulAddA_0,
    output[53:0] io_mulAddA_0,
    output io_latchMulAddB_0,
    output[53:0] io_mulAddB_0,
    output[104:0] io_mulAddC_2,
    input [104:0] io_mulAddResult_3
);

  wire[104:0] T0;
  wire[104:0] T1049;
  wire[55:0] T1;
  wire[55:0] T2;
  wire[1:0] T3;
  wire[1:0] T4;
  wire T5;
  reg  extraT_E;
  wire T6;
  wire T7;
  wire[53:0] sigT_C1;
  wire[53:0] zComplSigT_C1;
  wire[53:0] T8;
  wire[53:0] T9;
  wire[53:0] T10;
  wire[52:0] T11;
  wire[52:0] T12;
  wire T13;
  wire E_C1_div;
  wire T14;
  wire cyc_C1_div;
  wire T15;
  reg  sqrtOp_PC;
  wire T16;
  wire T17;
  reg  sqrtOp_PB;
  wire T18;
  wire T19;
  reg  sqrtOp_PA;
  wire T20;
  wire entering_PA;
  wire T21;
  wire T22;
  wire T23;
  wire ready_PB;
  wire T24;
  wire valid_leaving_PB;
  wire ready_PC;
  wire T25;
  wire valid_leaving_PC;
  wire cyc_E1;
  wire T26;
  reg [2:0] cycleNum_E;
  wire[2:0] T1050;
  wire[2:0] T27;
  wire[2:0] T28;
  wire[2:0] T29;
  wire T30;
  wire T31;
  wire T32;
  wire normalCase_PC;
  wire T33;
  wire T34;
  wire isZeroB_PC;
  reg [2:0] specialCodeB_PC;
  wire[2:0] T35;
  wire[2:0] T36;
  wire[2:0] specialCodeB_S;
  wire[11:0] expB_S;
  reg [2:0] specialCodeB_PB;
  wire[2:0] T37;
  wire[2:0] T38;
  reg [2:0] specialCodeB_PA;
  wire[2:0] T39;
  wire T40;
  wire T41;
  wire isZeroA_PC;
  reg [2:0] specialCodeA_PC;
  wire[2:0] T42;
  wire[2:0] T43;
  wire[2:0] specialCodeA_S;
  wire[11:0] expA_S;
  reg [2:0] specialCodeA_PB;
  wire[2:0] T44;
  wire[2:0] T45;
  reg [2:0] specialCodeA_PA;
  wire[2:0] T46;
  wire T47;
  wire T48;
  wire T49;
  wire T50;
  wire isSpecialB_PC;
  wire[1:0] T51;
  wire T52;
  wire isSpecialA_PC;
  wire[1:0] T53;
  wire T54;
  wire T55;
  reg  sign_PC;
  wire T56;
  wire T57;
  wire sign_S;
  wire T58;
  wire signA_S;
  wire signB_S;
  reg  sign_PB;
  wire T59;
  wire T60;
  reg  sign_PA;
  wire T61;
  wire T62;
  wire T63;
  wire T64;
  wire T65;
  reg  valid_PC;
  wire T1051;
  wire T66;
  wire T67;
  wire leaving_PC;
  wire T68;
  wire cyc_C3;
  wire T69;
  reg [2:0] cycleNum_C;
  wire[2:0] T1052;
  wire[2:0] T70;
  wire[2:0] T71;
  wire[2:0] T72;
  wire[2:0] T73;
  wire cyc_B1;
  wire T74;
  reg [3:0] cycleNum_B;
  wire[3:0] T1053;
  wire[3:0] T75;
  wire[3:0] T76;
  wire[3:0] T77;
  wire[3:0] T78;
  wire cyc_A1;
  reg [2:0] cycleNum_A;
  wire[2:0] T1054;
  wire[2:0] T79;
  wire[2:0] T80;
  wire[2:0] T81;
  wire[2:0] T82;
  wire T83;
  wire[2:0] T84;
  wire[2:0] T85;
  wire cyc_A7_sqrt;
  wire normalCase_S_sqrt;
  wire T86;
  wire T87;
  wire T88;
  wire isZeroB_S;
  wire T89;
  wire isSpecialB_S;
  wire[1:0] T90;
  wire cyc_S_sqrt;
  wire T91;
  wire[2:0] T1055;
  wire[1:0] T92;
  wire cyc_A4_div;
  wire normalCase_S_div;
  wire T93;
  wire T94;
  wire T95;
  wire isZeroA_S;
  wire T96;
  wire T97;
  wire T98;
  wire isSpecialA_S;
  wire[1:0] T99;
  wire cyc_S_div;
  wire T100;
  wire T101;
  wire T102;
  wire T103;
  wire T104;
  wire T105;
  wire T106;
  wire T107;
  wire normalCase_PB;
  wire T108;
  wire T109;
  wire isZeroB_PB;
  wire T110;
  wire T111;
  wire isZeroA_PB;
  wire T112;
  wire T113;
  wire isSpecialB_PB;
  wire[1:0] T114;
  wire T115;
  wire isSpecialA_PB;
  wire[1:0] T116;
  wire T117;
  wire T118;
  wire T119;
  wire T120;
  wire T121;
  wire T122;
  wire cyc_S;
  wire entering_PA_normalCase;
  reg  valid_PA;
  wire T1056;
  wire T123;
  wire T124;
  wire leaving_PA;
  wire T125;
  wire valid_leaving_PA;
  wire valid_normalCase_leaving_PA;
  wire cyc_B7_sqrt;
  wire T126;
  wire cyc_B4_div;
  wire T127;
  wire T128;
  wire T129;
  wire cyc_B4;
  wire T130;
  wire normalCase_PA;
  wire T131;
  wire T132;
  wire isZeroB_PA;
  wire T133;
  wire T134;
  wire isZeroA_PA;
  wire T135;
  wire T136;
  wire isSpecialB_PA;
  wire[1:0] T137;
  wire T138;
  wire isSpecialA_PA;
  wire[1:0] T139;
  wire T140;
  wire T141;
  wire T142;
  wire T143;
  wire T144;
  wire entering_PB;
  wire entering_PB_S;
  wire T145;
  wire T146;
  wire T147;
  wire T148;
  wire leaving_PB;
  wire T149;
  wire T150;
  wire T151;
  wire T152;
  wire T153;
  wire normalCase_S;
  reg  valid_PB;
  wire T1057;
  wire T154;
  wire T155;
  wire entering_PC;
  wire entering_PC_S;
  wire T156;
  wire T157;
  wire T158;
  wire T159;
  wire T160;
  wire T161;
  wire[53:0] T162;
  wire[53:0] T163;
  wire[53:0] T164;
  wire T165;
  wire cyc_C1_sqrt;
  wire T166;
  wire T167;
  wire cyc_C1;
  wire T168;
  wire[1:0] T169;
  wire[1:0] T170;
  wire T171;
  wire[52:0] sigB_PC;
  wire[51:0] T172;
  reg [50:0] fractB_other_PC;
  wire[50:0] T173;
  reg [50:0] fractB_other_PB;
  wire[50:0] T174;
  reg [50:0] fractB_other_PA;
  wire[50:0] T175;
  wire[50:0] T176;
  wire[51:0] fractB_S;
  wire entering_PB_normalCase;
  wire T177;
  wire entering_PC_normalCase;
  wire T178;
  reg  fractB_51_PC;
  wire T179;
  wire T180;
  wire T181;
  reg  fractB_51_PB;
  wire T182;
  wire T183;
  wire T184;
  reg  fractB_51_PA;
  wire T185;
  wire T186;
  wire T187;
  wire T188;
  wire T189;
  wire[1:0] T190;
  wire T191;
  wire T192;
  reg [13:0] exp_PC;
  wire[13:0] T193;
  reg [13:0] exp_PB;
  wire[13:0] T194;
  reg [13:0] exp_PA;
  wire[13:0] T195;
  wire[13:0] T196;
  wire[13:0] T197;
  wire[13:0] T198;
  wire[10:0] T199;
  wire[10:0] T200;
  wire[2:0] T201;
  wire[2:0] T1058;
  wire T202;
  wire[13:0] T1059;
  wire[13:0] T1060;
  wire cyc_E3_sqrt;
  wire cyc_E3;
  wire T203;
  wire[104:0] T204;
  wire[104:0] T1061;
  wire[53:0] T205;
  wire[53:0] T206;
  reg  fractA_0_PC;
  wire T207;
  reg  fractA_0_PB;
  wire T208;
  wire T209;
  reg [50:0] fractA_other_PA;
  wire[50:0] T210;
  wire[50:0] T211;
  wire[51:0] fractA_S;
  wire T212;
  wire T213;
  reg  E_E_div;
  wire T214;
  wire cyc_E3_div;
  wire T215;
  wire[104:0] T216;
  wire[104:0] T217;
  wire[104:0] T218;
  reg [57:0] sigXN_C;
  wire[57:0] T219;
  wire[57:0] sigXNU_B3_CX;
  wire[57:0] T220;
  wire T221;
  wire cyc_C3_sqrt;
  wire T222;
  wire cyc_C5_div;
  wire T223;
  wire cyc_C5;
  wire T224;
  wire cyc_C6_sqrt;
  wire T225;
  wire cyc_C2;
  wire T226;
  wire cyc_C4_sqrt;
  wire cyc_C4;
  wire T227;
  wire[104:0] T228;
  wire[104:0] T1062;
  wire[103:0] T229;
  wire[103:0] T230;
  reg [57:0] sigX1_B;
  wire[57:0] T231;
  wire cyc_B3;
  wire T232;
  wire[104:0] T233;
  wire[104:0] T234;
  wire[53:0] T235;
  wire[53:0] T1063;
  wire[52:0] T236;
  wire[52:0] T1064;
  wire[32:0] T237;
  reg [32:0] sqrSigma1_C;
  wire[32:0] T238;
  wire[32:0] sqrSigma1_B1;
  wire[52:0] T239;
  wire[52:0] T1065;
  wire[29:0] T240;
  wire[29:0] T241;
  wire[52:0] T242;
  wire[52:0] T1066;
  wire[45:0] zSigma1_B4;
  wire[45:0] T243;
  wire[45:0] T244;
  wire[45:0] T245;
  wire[52:0] T246;
  wire[52:0] T247;
  wire[52:0] T248;
  reg [16:0] ER1_B_sqrt;
  wire[16:0] T249;
  wire[16:0] ER1_A1_sqrt;
  wire[16:0] T1067;
  wire[15:0] r1_A1;
  wire[14:0] fractR1_A1;
  wire[15:0] T250;
  wire[15:0] T251;
  wire[24:0] mulAdd9Out_A;
  wire[17:0] T252;
  wire[18:0] loMulAdd9Out_A;
  wire[18:0] T253;
  wire[17:0] T254;
  wire[24:0] mulAdd9C_A;
  wire[24:0] T1068;
  wire[23:0] T255;
  wire[23:0] T256;
  reg [8:0] fractR0_A;
  wire[8:0] T257;
  wire[8:0] T258;
  wire[8:0] zFractR0_A4_div;
  wire[13:0] T259;
  wire[13:0] T260;
  wire[24:0] T261;
  wire T262;
  wire T263;
  wire[8:0] zFractR0_A6_sqrt;
  wire[14:0] T264;
  wire[14:0] T265;
  wire[24:0] T266;
  wire T267;
  wire T268;
  wire cyc_A6_sqrt;
  wire T269;
  wire cyc_A1_div;
  wire T270;
  wire[24:0] T271;
  wire[24:0] T272;
  wire[24:0] T273;
  wire[24:0] T1069;
  wire[20:0] T274;
  wire[20:0] T275;
  reg [20:0] partNegSigma0_A;
  wire[20:0] T276;
  wire[20:0] T277;
  wire[24:0] T278;
  wire[24:0] T1070;
  wire[15:0] T279;
  wire cyc_A4_sqrt;
  wire T280;
  wire cyc_A3;
  wire T281;
  wire cyc_A2;
  wire cyc_A3_sqrt;
  wire[20:0] T282;
  wire[20:0] T283;
  wire[20:0] T284;
  wire[20:0] T285;
  wire[52:0] sigB_PA;
  wire[51:0] T286;
  wire T287;
  wire cyc_A3_div;
  wire T288;
  wire T289;
  wire T290;
  reg [9:0] hiSqrR0_A_sqrt;
  wire[9:0] T1071;
  wire[15:0] T291;
  wire[15:0] T1072;
  wire[15:0] T292;
  wire[25:0] sqrR0_A5_sqrt;
  wire[25:0] T1073;
  wire[25:0] T293;
  wire T294;
  wire cyc_A5_sqrt;
  wire[20:0] T295;
  wire[20:0] T1074;
  wire[10:0] T296;
  wire T297;
  wire T298;
  wire T299;
  wire[20:0] T300;
  wire[20:0] T1075;
  wire[19:0] T301;
  wire[19:0] T302;
  wire[19:0] T1076;
  wire[18:0] T303;
  wire[20:0] T304;
  wire[20:0] T305;
  wire[19:0] T306;
  wire[7:0] T307;
  wire[7:0] T1077;
  wire[11:0] zComplFractK0_A4_div;
  wire[11:0] T308;
  wire zLinPiece_7_A4_div;
  wire T309;
  wire[2:0] T310;
  wire[11:0] T311;
  wire[11:0] T312;
  wire zLinPiece_6_A4_div;
  wire T313;
  wire[2:0] T314;
  wire[11:0] T315;
  wire[11:0] T316;
  wire zLinPiece_5_A4_div;
  wire T317;
  wire[2:0] T318;
  wire[11:0] T319;
  wire[11:0] T320;
  wire zLinPiece_4_A4_div;
  wire T321;
  wire[2:0] T322;
  wire[11:0] T323;
  wire[11:0] T324;
  wire zLinPiece_3_A4_div;
  wire T325;
  wire[2:0] T326;
  wire[11:0] T327;
  wire[11:0] T328;
  wire zLinPiece_2_A4_div;
  wire T329;
  wire[2:0] T330;
  wire[11:0] T331;
  wire[11:0] T332;
  wire zLinPiece_1_A4_div;
  wire T333;
  wire[2:0] T334;
  wire[11:0] T335;
  wire zLinPiece_0_A4_div;
  wire T336;
  wire[2:0] T337;
  wire[20:0] T1078;
  wire[19:0] T338;
  wire[19:0] T339;
  wire[18:0] T340;
  wire[5:0] T341;
  wire[5:0] T1079;
  wire[12:0] zComplFractK0_A6_sqrt;
  wire[12:0] T342;
  wire zQuadPiece_3_A6_sqrt;
  wire T343;
  wire T344;
  wire T345;
  wire[12:0] T346;
  wire[12:0] T347;
  wire zQuadPiece_2_A6_sqrt;
  wire T348;
  wire T349;
  wire T350;
  wire T351;
  wire[12:0] T352;
  wire[12:0] T353;
  wire zQuadPiece_1_A6_sqrt;
  wire T354;
  wire T355;
  wire T356;
  wire T357;
  wire[12:0] T358;
  wire zQuadPiece_0_A6_sqrt;
  wire T359;
  wire T360;
  wire T361;
  wire T362;
  wire T363;
  wire[19:0] T364;
  wire[9:0] zComplK1_A7_sqrt;
  wire[9:0] T365;
  wire zQuadPiece_3_A7_sqrt;
  wire T366;
  wire T367;
  wire T368;
  wire[9:0] T369;
  wire[9:0] T370;
  wire zQuadPiece_2_A7_sqrt;
  wire T371;
  wire T372;
  wire T373;
  wire T374;
  wire[9:0] T375;
  wire[9:0] T376;
  wire zQuadPiece_1_A7_sqrt;
  wire T377;
  wire T378;
  wire T379;
  wire T380;
  wire[9:0] T381;
  wire zQuadPiece_0_A7_sqrt;
  wire T382;
  wire T383;
  wire T384;
  wire T385;
  wire T386;
  wire[18:0] T1080;
  wire[17:0] T387;
  wire[8:0] mulAdd9B_A;
  wire[8:0] T388;
  reg [8:0] nextMulAdd9B_A;
  wire[8:0] T389;
  wire[8:0] T390;
  wire[8:0] T391;
  wire[8:0] T392;
  wire[7:0] T393;
  wire[8:0] T394;
  wire[8:0] T395;
  wire[8:0] T396;
  wire[8:0] T397;
  wire[8:0] T398;
  wire[8:0] T399;
  wire[8:0] T400;
  wire[8:0] T401;
  wire[8:0] T402;
  wire[51:0] zFractB_A7_sqrt;
  wire T403;
  wire T404;
  wire cyc_A4;
  wire T405;
  wire T406;
  wire T407;
  wire[8:0] T408;
  wire[8:0] T409;
  wire[8:0] zK1_A4_div;
  wire[8:0] T410;
  wire[8:0] T411;
  wire[8:0] T412;
  wire[8:0] T413;
  wire[8:0] T414;
  wire[8:0] T415;
  wire[8:0] T416;
  wire[8:0] T417;
  wire[8:0] T418;
  wire[8:0] T419;
  wire[8:0] T420;
  wire[8:0] T421;
  wire[8:0] T422;
  wire[8:0] T423;
  wire[8:0] mulAdd9A_A;
  wire[8:0] T424;
  reg [8:0] nextMulAdd9A_A;
  wire[8:0] T1081;
  wire[13:0] T425;
  wire[13:0] T1082;
  wire[13:0] T426;
  wire[13:0] T1083;
  wire[8:0] zSigma0_A2;
  wire[22:0] T427;
  wire[22:0] T428;
  wire[24:0] T429;
  wire T430;
  wire T431;
  wire[13:0] T432;
  wire[13:0] T1084;
  wire[8:0] T433;
  wire[8:0] T434;
  wire T435;
  wire[13:0] T436;
  wire[13:0] T1085;
  wire[8:0] T437;
  wire[51:0] zFractB_A4_div;
  wire[13:0] T438;
  wire[13:0] T1086;
  wire[8:0] T439;
  wire[8:0] T440;
  wire[13:0] T441;
  wire[13:0] T1087;
  wire[13:0] T442;
  wire[13:0] T443;
  wire[24:0] T444;
  wire T445;
  wire T446;
  wire T447;
  wire T448;
  wire T449;
  wire T450;
  wire[8:0] T451;
  wire[8:0] zK2_A7_sqrt;
  wire[8:0] T452;
  wire[8:0] T453;
  wire[8:0] T454;
  wire[8:0] T455;
  wire[8:0] T456;
  wire[8:0] T457;
  wire[8:0] T458;
  wire[6:0] T459;
  wire[6:0] T460;
  wire[6:0] T461;
  wire[6:0] T462;
  wire T463;
  wire[15:0] T1088;
  wire[14:0] T464;
  wire[16:0] T465;
  wire T466;
  wire cyc_A1_sqrt;
  wire cyc_B6_sqrt;
  wire T467;
  wire T468;
  wire cyc_B6;
  wire T469;
  wire[52:0] T1089;
  wire[51:0] T470;
  wire[51:0] T1090;
  wire[50:0] T471;
  wire[50:0] T472;
  reg [31:0] ESqrR1_B_sqrt;
  wire[31:0] T473;
  wire[31:0] ESqrR1_B8_sqrt;
  wire cyc_B8_sqrt;
  wire T474;
  wire[51:0] T475;
  wire[51:0] T476;
  wire T477;
  wire T478;
  wire T479;
  wire T480;
  wire T481;
  wire T482;
  wire[53:0] T483;
  wire[53:0] zComplSigT_C1_sqrt;
  wire[53:0] T484;
  wire[53:0] T485;
  wire[53:0] T486;
  wire[53:0] T1091;
  wire[52:0] T487;
  wire[52:0] T488;
  wire[52:0] T489;
  wire[52:0] T1092;
  wire[45:0] T490;
  wire[45:0] T491;
  reg [30:0] u_C_sqrt;
  wire[30:0] T492;
  wire[30:0] T493;
  wire cyc_C5_sqrt;
  wire[52:0] T494;
  wire[52:0] T1093;
  wire[45:0] T495;
  wire[45:0] T496;
  wire[32:0] T497;
  wire cyc_C4_div;
  wire T498;
  wire[52:0] T499;
  wire[52:0] T1094;
  wire[45:0] T500;
  wire[45:0] T501;
  wire T502;
  wire[52:0] T503;
  wire[52:0] T1095;
  wire[33:0] T504;
  wire[52:0] T505;
  wire[52:0] T506;
  wire[52:0] sigA_PA;
  wire[51:0] T507;
  reg  fractA_51_PA;
  wire T508;
  wire T509;
  wire cyc_B6_div;
  wire T510;
  wire T511;
  wire T512;
  wire[52:0] T513;
  wire[52:0] T514;
  wire T515;
  wire[52:0] T516;
  wire[52:0] T517;
  wire T518;
  wire T519;
  wire T520;
  wire T521;
  wire T522;
  wire T523;
  wire T524;
  wire[3:0] T525;
  wire[1:0] T526;
  wire T527;
  wire cyc_B2_sqrt;
  wire T528;
  wire cyc_B2;
  wire T529;
  wire T530;
  wire T531;
  wire T532;
  wire T533;
  wire cyc_B1_sqrt;
  wire T534;
  wire T535;
  wire cyc_B3_sqrt;
  wire T536;
  wire T537;
  wire T538;
  wire cyc_B5;
  wire T539;
  wire T540;
  wire T541;
  wire T542;
  wire[1:0] T543;
  wire T544;
  wire T545;
  wire T546;
  wire cyc_B1_div;
  wire T547;
  wire T548;
  wire T549;
  wire T550;
  wire cyc_B4_sqrt;
  wire T551;
  wire T552;
  wire T553;
  wire T554;
  wire T555;
  wire T556;
  wire cyc_B9_sqrt;
  wire T557;
  wire T558;
  wire cyc_A2_div;
  wire T559;
  wire T560;
  wire T561;
  wire T562;
  wire cyc_B2_div;
  wire T563;
  wire T564;
  wire T565;
  wire T566;
  wire cyc_B5_sqrt;
  wire T567;
  wire T568;
  wire T569;
  wire T570;
  wire T571;
  wire T572;
  wire cyc_B10_sqrt;
  wire T573;
  wire T574;
  wire T575;
  wire[4:0] T576;
  wire[2:0] T577;
  wire[1:0] T578;
  wire inexact_E1;
  wire T579;
  wire inexactY_E1;
  wire anyRoundExtra_E1;
  wire T580;
  wire all1sHiRoundExtraT_E;
  wire[52:0] T581;
  wire[52:0] T1096;
  wire[51:0] T582;
  wire[52:0] roundMask_E;
  wire[26:0] T583;
  wire[13:0] T584;
  wire[6:0] T585;
  wire[3:0] T586;
  wire[1:0] T587;
  wire T588;
  wire[12:0] posExpX_E;
  wire[13:0] sExpX_E;
  wire[13:0] T1097;
  wire[12:0] T589;
  wire[12:0] T590;
  wire[12:0] T591;
  wire[13:0] T592;
  wire[13:0] T593;
  wire[13:0] expP1_PC;
  wire[13:0] T594;
  wire[12:0] T595;
  wire[13:0] T596;
  wire[12:0] T597;
  wire[13:0] expP2_PC;
  wire T598;
  wire T599;
  wire T600;
  wire T601;
  wire[13:0] T602;
  wire T603;
  wire T604;
  wire T605;
  wire[1:0] T606;
  wire posExpX_0001111_E;
  wire[6:0] T607;
  wire T608;
  wire T609;
  wire exp5X_lt_11111_E;
  wire exp3X_lt_111_E;
  wire[2:0] T610;
  wire exp5X_lt_11000_E;
  wire[1:0] T611;
  wire T612;
  wire T613;
  wire[2:0] T614;
  wire[1:0] T615;
  wire T616;
  wire T617;
  wire exp5X_lt_11110_E;
  wire exp3X_lt_110_E;
  wire[2:0] T618;
  wire T619;
  wire T620;
  wire T621;
  wire T622;
  wire exp5X_lt_11101_E;
  wire exp3X_lt_101_E;
  wire[2:0] T623;
  wire T624;
  wire T625;
  wire T626;
  wire T627;
  wire exp5X_lt_11100_E;
  wire exp3X_lt_100_E;
  wire[2:0] T628;
  wire T629;
  wire T630;
  wire[6:0] T631;
  wire[3:0] T632;
  wire[1:0] T633;
  wire T634;
  wire T635;
  wire exp5X_lt_11011_E;
  wire exp3X_lt_011_E;
  wire[2:0] T636;
  wire T637;
  wire T638;
  wire T639;
  wire T640;
  wire exp5X_lt_11010_E;
  wire exp3X_lt_010_E;
  wire[2:0] T641;
  wire T642;
  wire T643;
  wire[1:0] T644;
  wire T645;
  wire T646;
  wire exp5X_lt_11001_E;
  wire exp3X_lt_001_E;
  wire[2:0] T647;
  wire T648;
  wire T649;
  wire T650;
  wire T651;
  wire T652;
  wire T653;
  wire[2:0] T654;
  wire[1:0] T655;
  wire T656;
  wire T657;
  wire exp5X_lt_10111_E;
  wire T658;
  wire exp5X_10_E;
  wire[1:0] T659;
  wire T660;
  wire T661;
  wire T662;
  wire T663;
  wire T664;
  wire T665;
  wire exp5X_lt_10110_E;
  wire T666;
  wire T667;
  wire T668;
  wire T669;
  wire T670;
  wire T671;
  wire T672;
  wire exp5X_lt_10101_E;
  wire T673;
  wire T674;
  wire T675;
  wire T676;
  wire T677;
  wire[12:0] T678;
  wire[6:0] T679;
  wire[3:0] T680;
  wire[1:0] T681;
  wire T682;
  wire T683;
  wire exp5X_lt_10100_E;
  wire T684;
  wire T685;
  wire T686;
  wire T687;
  wire T688;
  wire T689;
  wire T690;
  wire exp5X_lt_10011_E;
  wire T691;
  wire T692;
  wire T693;
  wire T694;
  wire T695;
  wire[1:0] T696;
  wire T697;
  wire T698;
  wire exp5X_lt_10010_E;
  wire T699;
  wire T700;
  wire T701;
  wire T702;
  wire T703;
  wire T704;
  wire T705;
  wire exp5X_lt_10001_E;
  wire T706;
  wire T707;
  wire T708;
  wire T709;
  wire T710;
  wire[2:0] T711;
  wire[1:0] T712;
  wire T713;
  wire T714;
  wire exp5X_lt_10000_E;
  wire T715;
  wire T716;
  wire T717;
  wire T718;
  wire T719;
  wire exp5X_lt_01111_E;
  wire T720;
  wire exp5X_01_E;
  wire[1:0] T721;
  wire exp5X_00_E;
  wire[1:0] T722;
  wire T723;
  wire T724;
  wire T725;
  wire T726;
  wire exp5X_lt_01110_E;
  wire T727;
  wire T728;
  wire T729;
  wire[5:0] T730;
  wire[2:0] T731;
  wire[1:0] T732;
  wire T733;
  wire T734;
  wire exp5X_lt_01101_E;
  wire T735;
  wire T736;
  wire T737;
  wire T738;
  wire T739;
  wire exp5X_lt_01100_E;
  wire T740;
  wire T741;
  wire T742;
  wire T743;
  wire T744;
  wire exp5X_lt_01011_E;
  wire T745;
  wire T746;
  wire T747;
  wire[2:0] T748;
  wire[1:0] T749;
  wire T750;
  wire T751;
  wire exp5X_lt_01010_E;
  wire T752;
  wire T753;
  wire T754;
  wire T755;
  wire T756;
  wire exp5X_lt_01001_E;
  wire T757;
  wire T758;
  wire T759;
  wire T760;
  wire T761;
  wire T762;
  wire T763;
  wire[25:0] T764;
  wire[12:0] T765;
  wire[6:0] T766;
  wire[3:0] T767;
  wire[1:0] T768;
  wire T769;
  wire T770;
  wire exp5X_lt_00111_E;
  wire T771;
  wire T772;
  wire T773;
  wire T774;
  wire exp5X_lt_00110_E;
  wire T775;
  wire T776;
  wire[1:0] T777;
  wire T778;
  wire T779;
  wire exp5X_lt_00101_E;
  wire T780;
  wire T781;
  wire T782;
  wire T783;
  wire exp5X_lt_00100_E;
  wire T784;
  wire T785;
  wire[2:0] T786;
  wire[1:0] T787;
  wire T788;
  wire T789;
  wire exp5X_lt_00011_E;
  wire T790;
  wire T791;
  wire T792;
  wire T793;
  wire exp5X_lt_00010_E;
  wire T794;
  wire T795;
  wire T796;
  wire T797;
  wire exp5X_lt_00001_E;
  wire T798;
  wire T799;
  wire[5:0] T800;
  wire[2:0] T801;
  wire[1:0] T802;
  wire posExpX_00011110_E;
  wire T803;
  wire T804;
  wire T805;
  wire T806;
  wire[2:0] T807;
  wire[1:0] T808;
  wire T809;
  wire T810;
  wire T811;
  wire[12:0] T812;
  wire[6:0] T813;
  wire[3:0] T814;
  wire[1:0] T815;
  wire T816;
  wire T817;
  wire[1:0] T818;
  wire T819;
  wire T820;
  wire[2:0] T821;
  wire[1:0] T822;
  wire T823;
  wire T824;
  wire T825;
  wire[5:0] T826;
  wire[2:0] T827;
  wire[1:0] T828;
  wire T829;
  wire T830;
  wire T831;
  wire[2:0] T832;
  wire[1:0] T833;
  wire posExpX_000111100_E;
  wire T834;
  wire T835;
  wire T836;
  wire T837;
  wire[3:0] T838;
  wire T839;
  wire T840;
  wire[3:0] T841;
  wire[52:0] T842;
  reg [52:0] sigT_E;
  wire[52:0] T843;
  wire[52:0] T844;
  wire T845;
  wire T846;
  wire T847;
  reg  isZeroRemT_E;
  wire T848;
  wire T849;
  wire T850;
  wire T851;
  wire[1:0] T852;
  wire[55:0] remT_E2;
  wire T853;
  wire T854;
  wire[53:0] T855;
  wire cyc_E2;
  wire T856;
  wire hiRoundPosBit_E1;
  wire T857;
  wire T858;
  wire T859;
  wire T860;
  wire trueLtX_E1;
  reg  isNegRemT_E;
  wire T861;
  wire T862;
  wire T863;
  wire T864;
  wire T865;
  wire T866;
  wire T867;
  wire T868;
  wire hiRoundPosBitT_E;
  wire[52:0] T869;
  wire[52:0] T870;
  wire[53:0] incrPosMask_E;
  wire[53:0] T871;
  wire[53:0] T872;
  wire[53:0] T873;
  wire T874;
  wire underflow_E1;
  wire underflowY_E1;
  wire T875;
  wire T876;
  wire totalUnderflowY_E1;
  wire T877;
  wire[12:0] T878;
  wire[13:0] sExpY_E1;
  wire[13:0] T1098;
  wire[12:0] T879;
  wire[12:0] T880;
  wire[12:0] T881;
  wire T882;
  wire T883;
  wire[53:0] sigY_E1;
  wire[53:0] T884;
  wire[53:0] roundEvenMask_E1;
  wire T885;
  wire T886;
  wire T887;
  wire roundingMode_near_even_PC;
  reg [1:0] roundingMode_PC;
  wire[1:0] T888;
  wire[1:0] T889;
  reg [1:0] roundingMode_PB;
  wire[1:0] T890;
  wire[1:0] T891;
  reg [1:0] roundingMode_PA;
  wire[1:0] T892;
  wire[53:0] T893;
  wire[53:0] sigY0_E;
  wire[53:0] T894;
  wire[52:0] T895;
  wire[53:0] sigAdjT_E;
  wire[53:0] T1099;
  wire roundMagUp_PC;
  wire roundingMode_max_PC;
  wire roundingMode_min_PC;
  wire[53:0] T896;
  wire[53:0] T1100;
  wire[53:0] sigY1_E;
  wire[53:0] T897;
  wire[53:0] T898;
  wire T899;
  wire T900;
  wire T901;
  wire T902;
  wire T903;
  wire T904;
  wire T905;
  wire T906;
  wire T907;
  wire T908;
  wire T909;
  wire T910;
  wire T911;
  wire T912;
  wire T913;
  wire T914;
  wire all1sHiRoundT_E;
  wire T915;
  wire T916;
  wire T917;
  wire T918;
  wire T919;
  wire T920;
  wire T921;
  wire T922;
  wire T923;
  wire T924;
  wire T925;
  wire roundMagDown_PC;
  wire T926;
  wire T927;
  wire[13:0] T928;
  wire[13:0] T929;
  wire T930;
  wire T931;
  wire T932;
  wire T933;
  wire T934;
  wire[13:0] T935;
  wire[13:0] T936;
  wire T937;
  wire T938;
  wire T939;
  wire T940;
  wire[13:0] T941;
  wire T942;
  wire T943;
  wire T944;
  wire overflow_E1;
  wire overflowY_E1;
  wire T945;
  wire[2:0] T946;
  wire T947;
  wire T948;
  wire[1:0] T949;
  wire infinity_PC;
  wire T950;
  wire T951;
  wire T952;
  wire T953;
  wire T954;
  wire invalid_PC;
  wire notSigNaN_invalid_PC;
  wire T955;
  wire T956;
  wire isInfB_PC;
  wire T957;
  wire T958;
  wire isInfA_PC;
  wire T959;
  wire T960;
  wire T961;
  wire T962;
  wire T963;
  wire T964;
  wire T965;
  wire isNaNB_PC;
  wire T966;
  wire T967;
  wire isSigNaNB_PC;
  wire T968;
  wire T969;
  wire isSigNaNA_PC;
  wire T970;
  reg  fractA_51_PC;
  wire T971;
  wire T972;
  wire T973;
  reg  fractA_51_PB;
  wire T974;
  wire T975;
  wire T976;
  wire isNaNA_PC;
  wire T977;
  wire T978;
  wire[64:0] T979;
  wire[63:0] T980;
  wire[51:0] fractOut_E1;
  wire[51:0] T981;
  wire T982;
  wire pegMaxFiniteMagOut_E1;
  wire T983;
  wire overflowY_roundMagUp_PC;
  wire isNaNOut_PC;
  wire T984;
  wire T985;
  wire T986;
  wire[51:0] T987;
  wire[51:0] fractY_E1;
  wire T988;
  wire[11:0] expOut_E1;
  wire[11:0] T989;
  wire[11:0] T990;
  wire[11:0] T991;
  wire notNaN_isInfOut_E1;
  wire T992;
  wire T993;
  wire T994;
  wire[11:0] T995;
  wire[11:0] T996;
  wire[11:0] T997;
  wire[11:0] T998;
  wire pegMinFiniteMagOut_E1;
  wire T999;
  wire[11:0] T1000;
  wire[11:0] T1001;
  wire[11:0] T1002;
  wire[11:0] T1003;
  wire[11:0] T1004;
  wire[11:0] T1005;
  wire[11:0] T1006;
  wire[11:0] T1007;
  wire[11:0] T1008;
  wire[11:0] T1009;
  wire[11:0] T1010;
  wire[11:0] T1011;
  wire notSpecial_isZeroOut_E1;
  wire T1012;
  wire T1013;
  wire T1014;
  wire T1015;
  wire[11:0] expY_E1;
  wire signOut_PC;
  wire T1016;
  wire T1017;
  wire T1018;
  wire T1019;
  wire T1020;
  wire T1021;
  wire T1022;
  wire T1023;
  wire T1024;
  wire T1025;
  wire T1026;
  wire T1027;
  wire T1028;
  wire T1029;
  wire T1030;
  wire ready_PA;
  wire T1031;
  wire T1032;
  wire T1033;
  wire T1034;
  wire T1035;
  wire T1036;
  wire T1037;
  wire T1038;
  wire T1039;
  wire T1040;
  wire T1041;
  wire T1042;
  wire T1043;
  wire T1044;
  wire T1045;
  wire T1046;
  wire T1047;
  wire T1048;

`ifndef SYNTHESIS
// synthesis translate_off
  integer initvar;
  initial begin
    #0.002;
    extraT_E = {1{$random}};
    sqrtOp_PC = {1{$random}};
    sqrtOp_PB = {1{$random}};
    sqrtOp_PA = {1{$random}};
    cycleNum_E = {1{$random}};
    specialCodeB_PC = {1{$random}};
    specialCodeB_PB = {1{$random}};
    specialCodeB_PA = {1{$random}};
    specialCodeA_PC = {1{$random}};
    specialCodeA_PB = {1{$random}};
    specialCodeA_PA = {1{$random}};
    sign_PC = {1{$random}};
    sign_PB = {1{$random}};
    sign_PA = {1{$random}};
    valid_PC = {1{$random}};
    cycleNum_C = {1{$random}};
    cycleNum_B = {1{$random}};
    cycleNum_A = {1{$random}};
    valid_PA = {1{$random}};
    valid_PB = {1{$random}};
    fractB_other_PC = {2{$random}};
    fractB_other_PB = {2{$random}};
    fractB_other_PA = {2{$random}};
    fractB_51_PC = {1{$random}};
    fractB_51_PB = {1{$random}};
    fractB_51_PA = {1{$random}};
    exp_PC = {1{$random}};
    exp_PB = {1{$random}};
    exp_PA = {1{$random}};
    fractA_0_PC = {1{$random}};
    fractA_0_PB = {1{$random}};
    fractA_other_PA = {2{$random}};
    E_E_div = {1{$random}};
    sigXN_C = {2{$random}};
    sigX1_B = {2{$random}};
    sqrSigma1_C = {2{$random}};
    ER1_B_sqrt = {1{$random}};
    fractR0_A = {1{$random}};
    partNegSigma0_A = {1{$random}};
    hiSqrR0_A_sqrt = {1{$random}};
    nextMulAdd9B_A = {1{$random}};
    nextMulAdd9A_A = {1{$random}};
    ESqrR1_B_sqrt = {1{$random}};
    u_C_sqrt = {1{$random}};
    fractA_51_PA = {1{$random}};
    sigT_E = {2{$random}};
    isZeroRemT_E = {1{$random}};
    isNegRemT_E = {1{$random}};
    roundingMode_PC = {1{$random}};
    roundingMode_PB = {1{$random}};
    roundingMode_PA = {1{$random}};
    fractA_51_PC = {1{$random}};
    fractA_51_PB = {1{$random}};
  end
// synthesis translate_on
`endif

  assign io_mulAddC_2 = T0;
  assign T0 = T204 | T1049;
  assign T1049 = {49'h0, T1};
  assign T1 = cyc_E3_sqrt ? T2 : 56'h0;
  assign T2 = T3 << 6'h36;
  assign T3 = T169 ^ T4;
  assign T4 = {T5, 1'h0};
  assign T5 = ~ extraT_E;
  assign T6 = cyc_C1 ? T7 : extraT_E;
  assign T7 = sigT_C1[1'h0:1'h0];
  assign sigT_C1 = ~ zComplSigT_C1;
  assign zComplSigT_C1 = T8;
  assign T8 = T162 | T9;
  assign T9 = T13 ? T10 : 54'h0;
  assign T10 = {1'h0, T11};
  assign T11 = ~ T12;
  assign T12 = io_mulAddResult_3[7'h66:6'h32];
  assign T13 = cyc_C1_div & E_C1_div;
  assign E_C1_div = ~ T14;
  assign T14 = io_mulAddResult_3[7'h68:7'h68];
  assign cyc_C1_div = cyc_C1 & T15;
  assign T15 = ~ sqrtOp_PC;
  assign T16 = entering_PC ? T17 : sqrtOp_PC;
  assign T17 = valid_PB ? sqrtOp_PB : io_sqrtOp;
  assign T18 = entering_PB ? T19 : sqrtOp_PB;
  assign T19 = valid_PA ? sqrtOp_PA : io_sqrtOp;
  assign T20 = entering_PA ? io_sqrtOp : sqrtOp_PA;
  assign entering_PA = entering_PA_normalCase | T21;
  assign T21 = cyc_S & T22;
  assign T22 = valid_PA | T23;
  assign T23 = ~ ready_PB;
  assign ready_PB = T24;
  assign T24 = T122 | valid_leaving_PB;
  assign valid_leaving_PB = normalCase_PB ? cyc_C3 : ready_PC;
  assign ready_PC = T25;
  assign T25 = T65 | valid_leaving_PC;
  assign valid_leaving_PC = T32 | cyc_E1;
  assign cyc_E1 = T26;
  assign T26 = cycleNum_E == 3'h1;
  assign T1050 = reset ? 3'h0 : T27;
  assign T27 = T30 ? T28 : cycleNum_E;
  assign T28 = cyc_C1 ? 3'h4 : T29;
  assign T29 = cycleNum_E - 3'h1;
  assign T30 = cyc_C1 | T31;
  assign T31 = cycleNum_E != 3'h0;
  assign T32 = ~ normalCase_PC;
  assign normalCase_PC = sqrtOp_PC ? T54 : T33;
  assign T33 = T40 & T34;
  assign T34 = ~ isZeroB_PC;
  assign isZeroB_PC = specialCodeB_PC == 3'h0;
  assign T35 = entering_PC ? T36 : specialCodeB_PC;
  assign T36 = valid_PB ? specialCodeB_PB : specialCodeB_S;
  assign specialCodeB_S = expB_S[4'hb:4'h9];
  assign expB_S = io_b[6'h3f:6'h34];
  assign T37 = entering_PB ? T38 : specialCodeB_PB;
  assign T38 = valid_PA ? specialCodeB_PA : specialCodeB_S;
  assign T39 = entering_PA ? specialCodeB_S : specialCodeB_PA;
  assign T40 = T49 & T41;
  assign T41 = ~ isZeroA_PC;
  assign isZeroA_PC = specialCodeA_PC == 3'h0;
  assign T42 = entering_PC ? T43 : specialCodeA_PC;
  assign T43 = valid_PB ? specialCodeA_PB : specialCodeA_S;
  assign specialCodeA_S = expA_S[4'hb:4'h9];
  assign expA_S = io_a[6'h3f:6'h34];
  assign T44 = entering_PB ? T45 : specialCodeA_PB;
  assign T45 = valid_PA ? specialCodeA_PA : specialCodeA_S;
  assign T46 = T47 ? specialCodeA_S : specialCodeA_PA;
  assign T47 = entering_PA & T48;
  assign T48 = ~ io_sqrtOp;
  assign T49 = T52 & T50;
  assign T50 = ~ isSpecialB_PC;
  assign isSpecialB_PC = T51 == 2'h3;
  assign T51 = specialCodeB_PC[2'h2:1'h1];
  assign T52 = ~ isSpecialA_PC;
  assign isSpecialA_PC = T53 == 2'h3;
  assign T53 = specialCodeA_PC[2'h2:1'h1];
  assign T54 = T62 & T55;
  assign T55 = ~ sign_PC;
  assign T56 = entering_PC ? T57 : sign_PC;
  assign T57 = valid_PB ? sign_PB : sign_S;
  assign sign_S = io_sqrtOp ? signB_S : T58;
  assign T58 = signA_S ^ signB_S;
  assign signA_S = io_a[7'h40:7'h40];
  assign signB_S = io_b[7'h40:7'h40];
  assign T59 = entering_PB ? T60 : sign_PB;
  assign T60 = valid_PA ? sign_PA : sign_S;
  assign T61 = entering_PA ? sign_S : sign_PA;
  assign T62 = T64 & T63;
  assign T63 = ~ isZeroB_PC;
  assign T64 = ~ isSpecialB_PC;
  assign T65 = ~ valid_PC;
  assign T1051 = reset ? 1'h0 : T66;
  assign T66 = T67 ? entering_PC : valid_PC;
  assign T67 = entering_PC | leaving_PC;
  assign leaving_PC = T68;
  assign T68 = valid_PC & valid_leaving_PC;
  assign cyc_C3 = T69;
  assign T69 = cycleNum_C == 3'h3;
  assign T1052 = reset ? 3'h0 : T70;
  assign T70 = T106 ? T71 : cycleNum_C;
  assign T71 = cyc_B1 ? T73 : T72;
  assign T72 = cycleNum_C - 3'h1;
  assign T73 = sqrtOp_PB ? 3'h6 : 3'h5;
  assign cyc_B1 = T74;
  assign T74 = cycleNum_B == 4'h1;
  assign T1053 = reset ? 4'h0 : T75;
  assign T75 = T104 ? T76 : cycleNum_B;
  assign T76 = cyc_A1 ? T78 : T77;
  assign T77 = cycleNum_B - 4'h1;
  assign T78 = sqrtOp_PA ? 4'ha : 4'h6;
  assign cyc_A1 = cycleNum_A == 3'h1;
  assign T1054 = reset ? 3'h0 : T79;
  assign T79 = T102 ? T80 : cycleNum_A;
  assign T80 = T84 | T81;
  assign T81 = T83 ? T82 : 3'h0;
  assign T82 = cycleNum_A - 3'h1;
  assign T83 = ~ entering_PA_normalCase;
  assign T84 = T1055 | T85;
  assign T85 = cyc_A7_sqrt ? 3'h6 : 3'h0;
  assign cyc_A7_sqrt = cyc_S_sqrt & normalCase_S_sqrt;
  assign normalCase_S_sqrt = T87 & T86;
  assign T86 = ~ signB_S;
  assign T87 = T89 & T88;
  assign T88 = ~ isZeroB_S;
  assign isZeroB_S = specialCodeB_S == 3'h0;
  assign T89 = ~ isSpecialB_S;
  assign isSpecialB_S = T90 == 2'h3;
  assign T90 = specialCodeB_S[2'h2:1'h1];
  assign cyc_S_sqrt = T91 & io_sqrtOp;
  assign T91 = io_inReady_sqrt & io_inValid;
  assign T1055 = {1'h0, T92};
  assign T92 = cyc_A4_div ? 2'h3 : 2'h0;
  assign cyc_A4_div = cyc_S_div & normalCase_S_div;
  assign normalCase_S_div = T94 & T93;
  assign T93 = ~ isZeroB_S;
  assign T94 = T96 & T95;
  assign T95 = ~ isZeroA_S;
  assign isZeroA_S = specialCodeA_S == 3'h0;
  assign T96 = T98 & T97;
  assign T97 = ~ isSpecialB_S;
  assign T98 = ~ isSpecialA_S;
  assign isSpecialA_S = T99 == 2'h3;
  assign T99 = specialCodeA_S[2'h2:1'h1];
  assign cyc_S_div = T101 & T100;
  assign T100 = ~ io_sqrtOp;
  assign T101 = io_inReady_div & io_inValid;
  assign T102 = entering_PA_normalCase | T103;
  assign T103 = cycleNum_A != 3'h0;
  assign T104 = cyc_A1 | T105;
  assign T105 = cycleNum_B != 4'h0;
  assign T106 = cyc_B1 | T107;
  assign T107 = cycleNum_C != 3'h0;
  assign normalCase_PB = sqrtOp_PB ? T117 : T108;
  assign T108 = T110 & T109;
  assign T109 = ~ isZeroB_PB;
  assign isZeroB_PB = specialCodeB_PB == 3'h0;
  assign T110 = T112 & T111;
  assign T111 = ~ isZeroA_PB;
  assign isZeroA_PB = specialCodeA_PB == 3'h0;
  assign T112 = T115 & T113;
  assign T113 = ~ isSpecialB_PB;
  assign isSpecialB_PB = T114 == 2'h3;
  assign T114 = specialCodeB_PB[2'h2:1'h1];
  assign T115 = ~ isSpecialA_PB;
  assign isSpecialA_PB = T116 == 2'h3;
  assign T116 = specialCodeA_PB[2'h2:1'h1];
  assign T117 = T119 & T118;
  assign T118 = ~ sign_PB;
  assign T119 = T121 & T120;
  assign T120 = ~ isZeroB_PB;
  assign T121 = ~ isSpecialB_PB;
  assign T122 = ~ valid_PB;
  assign cyc_S = cyc_S_div | cyc_S_sqrt;
  assign entering_PA_normalCase = cyc_A4_div | cyc_A7_sqrt;
  assign T1056 = reset ? 1'h0 : T123;
  assign T123 = T124 ? entering_PA : valid_PA;
  assign T124 = entering_PA | leaving_PA;
  assign leaving_PA = T125;
  assign T125 = valid_PA & valid_leaving_PA;
  assign valid_leaving_PA = normalCase_PA ? valid_normalCase_leaving_PA : ready_PB;
  assign valid_normalCase_leaving_PA = cyc_B4_div | cyc_B7_sqrt;
  assign cyc_B7_sqrt = T126;
  assign T126 = cycleNum_B == 4'h7;
  assign cyc_B4_div = T127;
  assign T127 = T129 & T128;
  assign T128 = ~ sqrtOp_PA;
  assign T129 = cyc_B4 & valid_PA;
  assign cyc_B4 = T130;
  assign T130 = cycleNum_B == 4'h4;
  assign normalCase_PA = sqrtOp_PA ? T140 : T131;
  assign T131 = T133 & T132;
  assign T132 = ~ isZeroB_PA;
  assign isZeroB_PA = specialCodeB_PA == 3'h0;
  assign T133 = T135 & T134;
  assign T134 = ~ isZeroA_PA;
  assign isZeroA_PA = specialCodeA_PA == 3'h0;
  assign T135 = T138 & T136;
  assign T136 = ~ isSpecialB_PA;
  assign isSpecialB_PA = T137 == 2'h3;
  assign T137 = specialCodeB_PA[2'h2:1'h1];
  assign T138 = ~ isSpecialA_PA;
  assign isSpecialA_PA = T139 == 2'h3;
  assign T139 = specialCodeA_PA[2'h2:1'h1];
  assign T140 = T142 & T141;
  assign T141 = ~ sign_PA;
  assign T142 = T144 & T143;
  assign T143 = ~ isZeroB_PA;
  assign T144 = ~ isSpecialB_PA;
  assign entering_PB = entering_PB_S | leaving_PA;
  assign entering_PB_S = T150 & T145;
  assign T145 = leaving_PB | T146;
  assign T146 = T148 & T147;
  assign T147 = ~ ready_PC;
  assign T148 = ~ valid_PB;
  assign leaving_PB = T149;
  assign T149 = valid_PB & valid_leaving_PB;
  assign T150 = T152 & T151;
  assign T151 = ~ valid_PA;
  assign T152 = cyc_S & T153;
  assign T153 = ~ normalCase_S;
  assign normalCase_S = io_sqrtOp ? normalCase_S_sqrt : normalCase_S_div;
  assign T1057 = reset ? 1'h0 : T154;
  assign T154 = T155 ? entering_PB : valid_PB;
  assign T155 = entering_PB | leaving_PB;
  assign entering_PC = entering_PC_S | leaving_PB;
  assign entering_PC_S = T156 & ready_PC;
  assign T156 = T158 & T157;
  assign T157 = ~ valid_PB;
  assign T158 = T160 & T159;
  assign T159 = ~ valid_PA;
  assign T160 = cyc_S & T161;
  assign T161 = ~ normalCase_S;
  assign T162 = T165 ? T163 : 54'h0;
  assign T163 = ~ T164;
  assign T164 = io_mulAddResult_3[7'h68:6'h33];
  assign T165 = T166 | cyc_C1_sqrt;
  assign cyc_C1_sqrt = cyc_C1 & sqrtOp_PC;
  assign T166 = cyc_C1_div & T167;
  assign T167 = ~ E_C1_div;
  assign cyc_C1 = T168;
  assign T168 = cycleNum_C == 3'h1;
  assign T169 = T192 ? T190 : T170;
  assign T170 = {T187, T171};
  assign T171 = sigB_PC[1'h0:1'h0];
  assign sigB_PC = {1'h1, T172};
  assign T172 = {fractB_51_PC, fractB_other_PC};
  assign T173 = entering_PC_normalCase ? fractB_other_PB : fractB_other_PC;
  assign T174 = entering_PB_normalCase ? fractB_other_PA : fractB_other_PB;
  assign T175 = entering_PA_normalCase ? T176 : fractB_other_PA;
  assign T176 = fractB_S[6'h32:1'h0];
  assign fractB_S = io_b[6'h33:1'h0];
  assign entering_PB_normalCase = T177 & valid_normalCase_leaving_PA;
  assign T177 = valid_PA & normalCase_PA;
  assign entering_PC_normalCase = T178 & cyc_C3;
  assign T178 = valid_PB & normalCase_PB;
  assign T179 = entering_PC ? T180 : fractB_51_PC;
  assign T180 = valid_PB ? fractB_51_PB : T181;
  assign T181 = fractB_S[6'h33:6'h33];
  assign T182 = entering_PB ? T183 : fractB_51_PB;
  assign T183 = valid_PA ? fractB_51_PA : T184;
  assign T184 = fractB_S[6'h33:6'h33];
  assign T185 = entering_PA ? T186 : fractB_51_PA;
  assign T186 = fractB_S[6'h33:6'h33];
  assign T187 = T189 ^ T188;
  assign T188 = sigB_PC[1'h0:1'h0];
  assign T189 = sigB_PC[1'h1:1'h1];
  assign T190 = {T191, 1'h0};
  assign T191 = sigB_PC[1'h0:1'h0];
  assign T192 = exp_PC[1'h0:1'h0];
  assign T193 = entering_PC_normalCase ? exp_PB : exp_PC;
  assign T194 = entering_PB_normalCase ? exp_PA : exp_PB;
  assign T195 = entering_PA_normalCase ? T196 : exp_PA;
  assign T196 = io_sqrtOp ? T1060 : T197;
  assign T197 = T1059 + T198;
  assign T198 = {T201, T199};
  assign T199 = ~ T200;
  assign T200 = expB_S[4'ha:1'h0];
  assign T201 = 3'h0 - T1058;
  assign T1058 = {2'h0, T202};
  assign T202 = expB_S[4'hb:4'hb];
  assign T1059 = {2'h0, expA_S};
  assign T1060 = {2'h0, expB_S};
  assign cyc_E3_sqrt = cyc_E3 & sqrtOp_PC;
  assign cyc_E3 = T203;
  assign T203 = cycleNum_E == 3'h3;
  assign T204 = T216 | T1061;
  assign T1061 = {51'h0, T205};
  assign T205 = T212 ? T206 : 54'h0;
  assign T206 = fractA_0_PC << 6'h35;
  assign T207 = entering_PC_normalCase ? fractA_0_PB : fractA_0_PC;
  assign T208 = entering_PB_normalCase ? T209 : fractA_0_PB;
  assign T209 = fractA_other_PA[1'h0:1'h0];
  assign T210 = cyc_A4_div ? T211 : fractA_other_PA;
  assign T211 = fractA_S[6'h32:1'h0];
  assign fractA_S = io_a[6'h33:1'h0];
  assign T212 = cyc_E3_div & T213;
  assign T213 = ~ E_E_div;
  assign T214 = cyc_C1 ? E_C1_div : E_E_div;
  assign cyc_E3_div = cyc_E3 & T215;
  assign T215 = ~ sqrtOp_PC;
  assign T216 = T228 | T217;
  assign T217 = T225 ? T218 : 105'h0;
  assign T218 = sigXN_C << 6'h2f;
  assign T219 = T221 ? sigXNU_B3_CX : sigXN_C;
  assign sigXNU_B3_CX = T220;
  assign T220 = io_mulAddResult_3[7'h68:6'h2f];
  assign T221 = T222 | cyc_C3_sqrt;
  assign cyc_C3_sqrt = cyc_C3 & sqrtOp_PB;
  assign T222 = cyc_C6_sqrt | cyc_C5_div;
  assign cyc_C5_div = cyc_C5 & T223;
  assign T223 = ~ sqrtOp_PB;
  assign cyc_C5 = T224;
  assign T224 = cycleNum_C == 3'h5;
  assign cyc_C6_sqrt = cycleNum_C == 3'h6;
  assign T225 = cyc_C4_sqrt | cyc_C2;
  assign cyc_C2 = T226;
  assign T226 = cycleNum_C == 3'h2;
  assign cyc_C4_sqrt = cyc_C4 & sqrtOp_PB;
  assign cyc_C4 = T227;
  assign T227 = cycleNum_C == 3'h4;
  assign T228 = T233 | T1062;
  assign T1062 = {1'h0, T229};
  assign T229 = cyc_C6_sqrt ? T230 : 104'h0;
  assign T230 = sigX1_B << 6'h2e;
  assign T231 = cyc_B3 ? sigXNU_B3_CX : sigX1_B;
  assign cyc_B3 = T232;
  assign T232 = cycleNum_B == 4'h3;
  assign T233 = cyc_B1 ? T234 : 105'h0;
  assign T234 = sigX1_B << 6'h2f;
  assign io_mulAddB_0 = T235;
  assign T235 = T1063 | zComplSigT_C1;
  assign T1063 = {1'h0, T236};
  assign T236 = T239 | T1064;
  assign T1064 = {20'h0, T237};
  assign T237 = cyc_C4 ? sqrSigma1_C : 33'h0;
  assign T238 = cyc_B1 ? sqrSigma1_B1 : sqrSigma1_C;
  assign sqrSigma1_B1 = io_mulAddResult_3[7'h4f:6'h2f];
  assign T239 = T242 | T1065;
  assign T1065 = {23'h0, T240};
  assign T240 = cyc_C6_sqrt ? T241 : 30'h0;
  assign T241 = sqrSigma1_C[5'h1e:1'h1];
  assign T242 = T246 | T1066;
  assign T1066 = {7'h0, zSigma1_B4};
  assign zSigma1_B4 = T243;
  assign T243 = cyc_B4 ? T244 : 46'h0;
  assign T244 = ~ T245;
  assign T245 = io_mulAddResult_3[7'h5a:6'h2d];
  assign T246 = T1089 | T247;
  assign T247 = cyc_B6_sqrt ? T248 : 53'h0;
  assign T248 = ER1_B_sqrt << 6'h24;
  assign T249 = cyc_A1_sqrt ? ER1_A1_sqrt : ER1_B_sqrt;
  assign ER1_A1_sqrt = T466 ? T465 : T1067;
  assign T1067 = {1'h0, r1_A1};
  assign r1_A1 = {1'h1, fractR1_A1};
  assign fractR1_A1 = T250[4'he:1'h0];
  assign T250 = sqrtOp_PA ? T1088 : T251;
  assign T251 = mulAdd9Out_A >> 4'h9;
  assign mulAdd9Out_A = {T459, T252};
  assign T252 = loMulAdd9Out_A[5'h11:1'h0];
  assign loMulAdd9Out_A = T1080 + T253;
  assign T253 = {1'h0, T254};
  assign T254 = mulAdd9C_A[5'h11:1'h0];
  assign mulAdd9C_A = T271 | T1068;
  assign T1068 = {1'h0, T255};
  assign T255 = cyc_A1_div ? T256 : 24'h0;
  assign T256 = fractR0_A << 4'hf;
  assign T257 = T269 ? T258 : fractR0_A;
  assign T258 = zFractR0_A6_sqrt | zFractR0_A4_div;
  assign zFractR0_A4_div = T259[4'h8:1'h0];
  assign T259 = T262 ? T260 : 14'h0;
  assign T260 = T261 >> 4'hb;
  assign T261 = ~ mulAdd9Out_A;
  assign T262 = cyc_A4_div & T263;
  assign T263 = mulAdd9Out_A[5'h14:5'h14];
  assign zFractR0_A6_sqrt = T264[4'h8:1'h0];
  assign T264 = T267 ? T265 : 15'h0;
  assign T265 = T266 >> 4'ha;
  assign T266 = ~ mulAdd9Out_A;
  assign T267 = cyc_A6_sqrt & T268;
  assign T268 = mulAdd9Out_A[5'h13:5'h13];
  assign cyc_A6_sqrt = cycleNum_A == 3'h6;
  assign T269 = cyc_A6_sqrt | cyc_A4_div;
  assign cyc_A1_div = cyc_A1 & T270;
  assign T270 = ~ sqrtOp_PA;
  assign T271 = T1069 | T272;
  assign T272 = cyc_A1_sqrt ? T273 : 25'h0;
  assign T273 = fractR0_A << 5'h10;
  assign T1069 = {4'h0, T274};
  assign T274 = T282 | T275;
  assign T275 = T281 ? partNegSigma0_A : 21'h0;
  assign T276 = T280 ? T277 : partNegSigma0_A;
  assign T277 = T278[5'h14:1'h0];
  assign T278 = cyc_A4_sqrt ? mulAdd9Out_A : T1070;
  assign T1070 = {9'h0, T279};
  assign T279 = mulAdd9Out_A >> 4'h9;
  assign cyc_A4_sqrt = cycleNum_A == 3'h4;
  assign T280 = cyc_A4_sqrt | cyc_A3;
  assign cyc_A3 = cycleNum_A == 3'h3;
  assign T281 = cyc_A3_sqrt | cyc_A2;
  assign cyc_A2 = cycleNum_A == 3'h2;
  assign cyc_A3_sqrt = cyc_A3 & sqrtOp_PA;
  assign T282 = T295 | T283;
  assign T283 = T287 ? T284 : 21'h0;
  assign T284 = T285 + 21'h400;
  assign T285 = sigB_PA[6'h2e:5'h1a];
  assign sigB_PA = {1'h1, T286};
  assign T286 = {fractB_51_PA, fractB_other_PA};
  assign T287 = T289 | cyc_A3_div;
  assign cyc_A3_div = cyc_A3 & T288;
  assign T288 = ~ sqrtOp_PA;
  assign T289 = cyc_A4_sqrt & T290;
  assign T290 = hiSqrR0_A_sqrt[4'h9:4'h9];
  assign T1071 = T291[4'h9:1'h0];
  assign T291 = cyc_A5_sqrt ? T292 : T1072;
  assign T1072 = {6'h0, hiSqrR0_A_sqrt};
  assign T292 = sqrR0_A5_sqrt >> 4'ha;
  assign sqrR0_A5_sqrt = T294 ? T293 : T1073;
  assign T1073 = {1'h0, mulAdd9Out_A};
  assign T293 = mulAdd9Out_A << 1'h1;
  assign T294 = exp_PA[1'h0:1'h0];
  assign cyc_A5_sqrt = cycleNum_A == 3'h5;
  assign T295 = T300 | T1074;
  assign T1074 = {10'h0, T296};
  assign T296 = T297 ? 11'h400 : 11'h0;
  assign T297 = cyc_A4_sqrt & T298;
  assign T298 = ~ T299;
  assign T299 = hiSqrR0_A_sqrt[4'h9:4'h9];
  assign T300 = T304 | T1075;
  assign T1075 = {1'h0, T301};
  assign T301 = cyc_A5_sqrt ? T302 : 20'h0;
  assign T302 = 20'h40000 + T1076;
  assign T1076 = {1'h0, T303};
  assign T303 = fractR0_A << 4'ha;
  assign T304 = T1078 | T305;
  assign T305 = {cyc_A4_div, T306};
  assign T306 = {zComplFractK0_A4_div, T307};
  assign T307 = 8'h0 - T1077;
  assign T1077 = {7'h0, cyc_A4_div};
  assign zComplFractK0_A4_div = T311 | T308;
  assign T308 = zLinPiece_7_A4_div ? 12'hef4 : 12'h0;
  assign zLinPiece_7_A4_div = cyc_A4_div & T309;
  assign T309 = T310 == 3'h7;
  assign T310 = fractB_S[6'h33:6'h31];
  assign T311 = T315 | T312;
  assign T312 = zLinPiece_6_A4_div ? 12'hdbd : 12'h0;
  assign zLinPiece_6_A4_div = cyc_A4_div & T313;
  assign T313 = T314 == 3'h6;
  assign T314 = fractB_S[6'h33:6'h31];
  assign T315 = T319 | T316;
  assign T316 = zLinPiece_5_A4_div ? 12'hc56 : 12'h0;
  assign zLinPiece_5_A4_div = cyc_A4_div & T317;
  assign T317 = T318 == 3'h5;
  assign T318 = fractB_S[6'h33:6'h31];
  assign T319 = T323 | T320;
  assign T320 = zLinPiece_4_A4_div ? 12'hab4 : 12'h0;
  assign zLinPiece_4_A4_div = cyc_A4_div & T321;
  assign T321 = T322 == 3'h4;
  assign T322 = fractB_S[6'h33:6'h31];
  assign T323 = T327 | T324;
  assign T324 = zLinPiece_3_A4_div ? 12'h8c6 : 12'h0;
  assign zLinPiece_3_A4_div = cyc_A4_div & T325;
  assign T325 = T326 == 3'h3;
  assign T326 = fractB_S[6'h33:6'h31];
  assign T327 = T331 | T328;
  assign T328 = zLinPiece_2_A4_div ? 12'h675 : 12'h0;
  assign zLinPiece_2_A4_div = cyc_A4_div & T329;
  assign T329 = T330 == 3'h2;
  assign T330 = fractB_S[6'h33:6'h31];
  assign T331 = T335 | T332;
  assign T332 = zLinPiece_1_A4_div ? 12'h3a2 : 12'h0;
  assign zLinPiece_1_A4_div = cyc_A4_div & T333;
  assign T333 = T334 == 3'h1;
  assign T334 = fractB_S[6'h33:6'h31];
  assign T335 = zLinPiece_0_A4_div ? 12'h1c : 12'h0;
  assign zLinPiece_0_A4_div = cyc_A4_div & T336;
  assign T336 = T337 == 3'h0;
  assign T337 = fractB_S[6'h33:6'h31];
  assign T1078 = {1'h0, T338};
  assign T338 = T364 | T339;
  assign T339 = {cyc_A6_sqrt, T340};
  assign T340 = {zComplFractK0_A6_sqrt, T341};
  assign T341 = 6'h0 - T1079;
  assign T1079 = {5'h0, cyc_A6_sqrt};
  assign zComplFractK0_A6_sqrt = T346 | T342;
  assign T342 = zQuadPiece_3_A6_sqrt ? 13'h1b17 : 13'h0;
  assign zQuadPiece_3_A6_sqrt = T344 & T343;
  assign T343 = sigB_PA[6'h33:6'h33];
  assign T344 = cyc_A6_sqrt & T345;
  assign T345 = exp_PA[1'h0:1'h0];
  assign T346 = T352 | T347;
  assign T347 = zQuadPiece_2_A6_sqrt ? 13'h12d3 : 13'h0;
  assign zQuadPiece_2_A6_sqrt = T350 & T348;
  assign T348 = ~ T349;
  assign T349 = sigB_PA[6'h33:6'h33];
  assign T350 = cyc_A6_sqrt & T351;
  assign T351 = exp_PA[1'h0:1'h0];
  assign T352 = T358 | T353;
  assign T353 = zQuadPiece_1_A6_sqrt ? 13'hbca : 13'h0;
  assign zQuadPiece_1_A6_sqrt = T355 & T354;
  assign T354 = sigB_PA[6'h33:6'h33];
  assign T355 = cyc_A6_sqrt & T356;
  assign T356 = ~ T357;
  assign T357 = exp_PA[1'h0:1'h0];
  assign T358 = zQuadPiece_0_A6_sqrt ? 13'h1a : 13'h0;
  assign zQuadPiece_0_A6_sqrt = T361 & T359;
  assign T359 = ~ T360;
  assign T360 = sigB_PA[6'h33:6'h33];
  assign T361 = cyc_A6_sqrt & T362;
  assign T362 = ~ T363;
  assign T363 = exp_PA[1'h0:1'h0];
  assign T364 = zComplK1_A7_sqrt << 4'ha;
  assign zComplK1_A7_sqrt = T369 | T365;
  assign T365 = zQuadPiece_3_A7_sqrt ? 10'h27e : 10'h0;
  assign zQuadPiece_3_A7_sqrt = T367 & T366;
  assign T366 = fractB_S[6'h33:6'h33];
  assign T367 = cyc_A7_sqrt & T368;
  assign T368 = expB_S[1'h0:1'h0];
  assign T369 = T375 | T370;
  assign T370 = zQuadPiece_2_A7_sqrt ? 10'h14d : 10'h0;
  assign zQuadPiece_2_A7_sqrt = T373 & T371;
  assign T371 = ~ T372;
  assign T372 = fractB_S[6'h33:6'h33];
  assign T373 = cyc_A7_sqrt & T374;
  assign T374 = expB_S[1'h0:1'h0];
  assign T375 = T381 | T376;
  assign T376 = zQuadPiece_1_A7_sqrt ? 10'h1df : 10'h0;
  assign zQuadPiece_1_A7_sqrt = T378 & T377;
  assign T377 = fractB_S[6'h33:6'h33];
  assign T378 = cyc_A7_sqrt & T379;
  assign T379 = ~ T380;
  assign T380 = expB_S[1'h0:1'h0];
  assign T381 = zQuadPiece_0_A7_sqrt ? 10'h2f : 10'h0;
  assign zQuadPiece_0_A7_sqrt = T384 & T382;
  assign T382 = ~ T383;
  assign T383 = fractB_S[6'h33:6'h33];
  assign T384 = cyc_A7_sqrt & T385;
  assign T385 = ~ T386;
  assign T386 = expB_S[1'h0:1'h0];
  assign T1080 = {1'h0, T387};
  assign T387 = mulAdd9A_A * mulAdd9B_A;
  assign mulAdd9B_A = T408 | T388;
  assign T388 = T407 ? nextMulAdd9B_A : 9'h0;
  assign T389 = T403 ? T390 : nextMulAdd9B_A;
  assign T390 = T394 | T391;
  assign T391 = cyc_A2 ? T392 : 9'h0;
  assign T392 = {1'h1, T393};
  assign T393 = fractR0_A[4'h8:1'h1];
  assign T394 = T397 | T395;
  assign T395 = cyc_A4_sqrt ? T396 : 9'h0;
  assign T396 = hiSqrR0_A_sqrt[4'h8:1'h0];
  assign T397 = T398 | zFractR0_A4_div;
  assign T398 = T401 | T399;
  assign T399 = cyc_A5_sqrt ? T400 : 9'h0;
  assign T400 = sqrR0_A5_sqrt[4'h9:1'h1];
  assign T401 = T402 | zFractR0_A6_sqrt;
  assign T402 = zFractB_A7_sqrt[6'h32:6'h2a];
  assign zFractB_A7_sqrt = cyc_A7_sqrt ? fractB_S : 52'h0;
  assign T403 = T404 | cyc_A2;
  assign T404 = T405 | cyc_A4;
  assign cyc_A4 = cyc_A4_sqrt | cyc_A4_div;
  assign T405 = T406 | cyc_A5_sqrt;
  assign T406 = cyc_A7_sqrt | cyc_A6_sqrt;
  assign T407 = ~ cyc_S;
  assign T408 = zK1_A4_div | T409;
  assign T409 = zFractB_A7_sqrt[6'h32:6'h2a];
  assign zK1_A4_div = T411 | T410;
  assign T410 = zLinPiece_7_A4_div ? 9'h89 : 9'h0;
  assign T411 = T413 | T412;
  assign T412 = zLinPiece_6_A4_div ? 9'h9c : 9'h0;
  assign T413 = T415 | T414;
  assign T414 = zLinPiece_5_A4_div ? 9'hb4 : 9'h0;
  assign T415 = T417 | T416;
  assign T416 = zLinPiece_4_A4_div ? 9'hd2 : 9'h0;
  assign T417 = T419 | T418;
  assign T418 = zLinPiece_3_A4_div ? 9'hf8 : 9'h0;
  assign T419 = T421 | T420;
  assign T420 = zLinPiece_2_A4_div ? 9'h12a : 9'h0;
  assign T421 = T423 | T422;
  assign T422 = zLinPiece_1_A4_div ? 9'h16c : 9'h0;
  assign T423 = zLinPiece_0_A4_div ? 9'h1c7 : 9'h0;
  assign mulAdd9A_A = T451 | T424;
  assign T424 = T450 ? nextMulAdd9A_A : 9'h0;
  assign T1081 = T425[4'h8:1'h0];
  assign T425 = T445 ? T426 : T1082;
  assign T1082 = {5'h0, nextMulAdd9A_A};
  assign T426 = T432 | T1083;
  assign T1083 = {5'h0, zSigma0_A2};
  assign zSigma0_A2 = T427[4'h8:1'h0];
  assign T427 = T430 ? T428 : 23'h0;
  assign T428 = T429 >> 2'h2;
  assign T429 = ~ mulAdd9Out_A;
  assign T430 = cyc_A2 & T431;
  assign T431 = mulAdd9Out_A[4'hb:4'hb];
  assign T432 = T436 | T1084;
  assign T1084 = {5'h0, T433};
  assign T433 = T435 ? T434 : 9'h0;
  assign T434 = sigB_PA[6'h34:6'h2c];
  assign T435 = cyc_A5_sqrt | cyc_A3;
  assign T436 = T438 | T1085;
  assign T1085 = {5'h0, T437};
  assign T437 = zFractB_A4_div[6'h2b:6'h23];
  assign zFractB_A4_div = cyc_A4_div ? fractB_S : 52'h0;
  assign T438 = T441 | T1086;
  assign T1086 = {5'h0, T439};
  assign T439 = cyc_A4_sqrt ? T440 : 9'h0;
  assign T440 = sigB_PA[6'h2b:6'h23];
  assign T441 = T442 | T1087;
  assign T1087 = {5'h0, zFractR0_A6_sqrt};
  assign T442 = cyc_A7_sqrt ? T443 : 14'h0;
  assign T443 = T444 >> 4'hb;
  assign T444 = ~ mulAdd9Out_A;
  assign T445 = T446 | cyc_A2;
  assign T446 = T447 | cyc_A3;
  assign T447 = T448 | cyc_A4;
  assign T448 = T449 | cyc_A5_sqrt;
  assign T449 = cyc_A7_sqrt | cyc_A6_sqrt;
  assign T450 = ~ cyc_S;
  assign T451 = T458 | zK2_A7_sqrt;
  assign zK2_A7_sqrt = T453 | T452;
  assign T452 = zQuadPiece_3_A7_sqrt ? 9'h89 : 9'h0;
  assign T453 = T455 | T454;
  assign T454 = zQuadPiece_2_A7_sqrt ? 9'h143 : 9'h0;
  assign T455 = T457 | T456;
  assign T456 = zQuadPiece_1_A7_sqrt ? 9'hc1 : 9'h0;
  assign T457 = zQuadPiece_0_A7_sqrt ? 9'h1c8 : 9'h0;
  assign T458 = zFractB_A4_div[6'h30:6'h28];
  assign T459 = T463 ? T461 : T460;
  assign T460 = mulAdd9C_A[5'h18:5'h12];
  assign T461 = T462 + 7'h1;
  assign T462 = mulAdd9C_A[5'h18:5'h12];
  assign T463 = loMulAdd9Out_A[5'h12:5'h12];
  assign T1088 = {1'h0, T464};
  assign T464 = mulAdd9Out_A >> 4'ha;
  assign T465 = r1_A1 << 1'h1;
  assign T466 = exp_PA[1'h0:1'h0];
  assign cyc_A1_sqrt = cyc_A1 & sqrtOp_PA;
  assign cyc_B6_sqrt = T467;
  assign T467 = T468 & sqrtOp_PB;
  assign T468 = cyc_B6 & valid_PB;
  assign cyc_B6 = T469;
  assign T469 = cycleNum_B == 4'h6;
  assign T1089 = {1'h0, T470};
  assign T470 = T475 | T1090;
  assign T1090 = {1'h0, T471};
  assign T471 = cyc_B7_sqrt ? T472 : 51'h0;
  assign T472 = ESqrR1_B_sqrt << 5'h13;
  assign T473 = cyc_B8_sqrt ? ESqrR1_B8_sqrt : ESqrR1_B_sqrt;
  assign ESqrR1_B8_sqrt = io_mulAddResult_3[7'h67:7'h48];
  assign cyc_B8_sqrt = T474;
  assign T474 = cycleNum_B == 4'h8;
  assign T475 = cyc_A1 ? T476 : 52'h0;
  assign T476 = r1_A1 << 6'h24;
  assign io_latchMulAddB_0 = T477;
  assign T477 = T478 | cyc_C1;
  assign T478 = T479 | cyc_C4;
  assign T479 = T480 | cyc_C6_sqrt;
  assign T480 = T481 | cyc_B4;
  assign T481 = T482 | cyc_B6_sqrt;
  assign T482 = cyc_A1 | cyc_B7_sqrt;
  assign io_mulAddA_0 = T483;
  assign T483 = T1091 | zComplSigT_C1_sqrt;
  assign zComplSigT_C1_sqrt = T484;
  assign T484 = cyc_C1_sqrt ? T485 : 54'h0;
  assign T485 = ~ T486;
  assign T486 = io_mulAddResult_3[7'h68:6'h33];
  assign T1091 = {1'h0, T487};
  assign T487 = T489 | T488;
  assign T488 = cyc_C1_div ? sigB_PC : 53'h0;
  assign T489 = T494 | T1092;
  assign T1092 = {7'h0, T490};
  assign T490 = cyc_C4_sqrt ? T491 : 46'h0;
  assign T491 = u_C_sqrt << 4'hf;
  assign T492 = cyc_C5_sqrt ? T493 : u_C_sqrt;
  assign T493 = sigXNU_B3_CX[6'h38:5'h1a];
  assign cyc_C5_sqrt = cyc_C5 & sqrtOp_PB;
  assign T494 = T499 | T1093;
  assign T1093 = {7'h0, T495};
  assign T495 = cyc_C4_div ? T496 : 46'h0;
  assign T496 = T497 << 4'hd;
  assign T497 = sigXN_C[6'h39:5'h19];
  assign cyc_C4_div = cyc_C4 & T498;
  assign T498 = ~ sqrtOp_PB;
  assign T499 = T503 | T1094;
  assign T1094 = {7'h0, T500};
  assign T500 = T502 ? T501 : 46'h0;
  assign T501 = sigXNU_B3_CX[6'h39:4'hc];
  assign T502 = cyc_B3 | cyc_C6_sqrt;
  assign T503 = T505 | T1095;
  assign T1095 = {19'h0, T504};
  assign T504 = zSigma1_B4[6'h2d:4'hc];
  assign T505 = T513 | T506;
  assign T506 = cyc_B6_div ? sigA_PA : 53'h0;
  assign sigA_PA = {1'h1, T507};
  assign T507 = {fractA_51_PA, fractA_other_PA};
  assign T508 = T47 ? T509 : fractA_51_PA;
  assign T509 = fractA_S[6'h33:6'h33];
  assign cyc_B6_div = T510;
  assign T510 = T512 & T511;
  assign T511 = ~ sqrtOp_PA;
  assign T512 = cyc_B6 & valid_PA;
  assign T513 = T516 | T514;
  assign T514 = T515 ? sigB_PA : 53'h0;
  assign T515 = cyc_B7_sqrt | cyc_A1_div;
  assign T516 = cyc_A1_sqrt ? T517 : 53'h0;
  assign T517 = ER1_A1_sqrt << 6'h24;
  assign io_latchMulAddA_0 = T518;
  assign T518 = T519 | cyc_C1;
  assign T519 = T520 | cyc_C4;
  assign T520 = T521 | cyc_C6_sqrt;
  assign T521 = T522 | cyc_B3;
  assign T522 = T523 | cyc_B4;
  assign T523 = T524 | cyc_B6_div;
  assign T524 = cyc_A1 | cyc_B7_sqrt;
  assign io_usingMulAdd = T525;
  assign T525 = {T543, T526};
  assign T526 = {T531, T527};
  assign T527 = T530 | cyc_B2_sqrt;
  assign cyc_B2_sqrt = T528;
  assign T528 = cyc_B2 & sqrtOp_PB;
  assign cyc_B2 = T529;
  assign T529 = cycleNum_B == 4'h2;
  assign T530 = io_latchMulAddA_0 | cyc_B6;
  assign T531 = T532 | cyc_C2;
  assign T532 = T533 | cyc_C5;
  assign T533 = T535 | cyc_B1_sqrt;
  assign cyc_B1_sqrt = T534;
  assign T534 = cyc_B1 & sqrtOp_PB;
  assign T535 = T537 | cyc_B3_sqrt;
  assign cyc_B3_sqrt = T536;
  assign T536 = cyc_B3 & sqrtOp_PB;
  assign T537 = T538 | cyc_B4;
  assign T538 = T540 | cyc_B5;
  assign cyc_B5 = T539;
  assign T539 = cycleNum_B == 4'h5;
  assign T540 = T541 | cyc_B7_sqrt;
  assign T541 = T542 | cyc_B8_sqrt;
  assign T542 = cyc_A2 | cyc_A1_div;
  assign T543 = {T560, T544};
  assign T544 = T545 | cyc_C3;
  assign T545 = T546 | cyc_C6_sqrt;
  assign T546 = T549 | cyc_B1_div;
  assign cyc_B1_div = T547;
  assign T547 = cyc_B1 & T548;
  assign T548 = ~ sqrtOp_PB;
  assign T549 = T550 | cyc_B2_sqrt;
  assign T550 = T553 | cyc_B4_sqrt;
  assign cyc_B4_sqrt = T551;
  assign T551 = T552 & sqrtOp_PB;
  assign T552 = cyc_B4 & valid_PB;
  assign T553 = T554 | cyc_B5;
  assign T554 = T555 | cyc_B6;
  assign T555 = T556 | cyc_B8_sqrt;
  assign T556 = T558 | cyc_B9_sqrt;
  assign cyc_B9_sqrt = T557;
  assign T557 = cycleNum_B == 4'h9;
  assign T558 = cyc_A3 | cyc_A2_div;
  assign cyc_A2_div = cyc_A2 & T559;
  assign T559 = ~ sqrtOp_PA;
  assign T560 = T561 | cyc_C4;
  assign T561 = T562 | cyc_B1_sqrt;
  assign T562 = T565 | cyc_B2_div;
  assign cyc_B2_div = T563;
  assign T563 = cyc_B2 & T564;
  assign T564 = ~ sqrtOp_PB;
  assign T565 = T566 | cyc_B3_sqrt;
  assign T566 = T569 | cyc_B5_sqrt;
  assign cyc_B5_sqrt = T567;
  assign T567 = T568 & sqrtOp_PB;
  assign T568 = cyc_B5 & valid_PB;
  assign T569 = T570 | cyc_B6;
  assign T570 = T571 | cyc_B7_sqrt;
  assign T571 = T572 | cyc_B9_sqrt;
  assign T572 = T574 | cyc_B10_sqrt;
  assign cyc_B10_sqrt = T573;
  assign T573 = cycleNum_B == 4'ha;
  assign T574 = T575 | cyc_A1_div;
  assign T575 = cyc_A4 | cyc_A3_div;
  assign io_exceptionFlags = T576;
  assign T576 = {T949, T577};
  assign T577 = {overflow_E1, T578};
  assign T578 = {underflow_E1, inexact_E1};
  assign inexact_E1 = T874 | T579;
  assign T579 = normalCase_PC & inexactY_E1;
  assign inexactY_E1 = hiRoundPosBit_E1 | anyRoundExtra_E1;
  assign anyRoundExtra_E1 = T845 | T580;
  assign T580 = ~ all1sHiRoundExtraT_E;
  assign all1sHiRoundExtraT_E = T581 == 53'h0;
  assign T581 = T842 & T1096;
  assign T1096 = {1'h0, T582};
  assign T582 = roundMask_E >> 1'h1;
  assign roundMask_E = {T764, T583};
  assign T583 = {T678, T584};
  assign T584 = {T631, T585};
  assign T585 = {T614, T586};
  assign T586 = {T606, T587};
  assign T587 = {T605, T588};
  assign T588 = posExpX_E < 13'h402;
  assign posExpX_E = sExpX_E[4'hc:1'h0];
  assign sExpX_E = T592 | T1097;
  assign T1097 = {1'h0, T589};
  assign T589 = sqrtOp_PC ? T590 : 13'h0;
  assign T590 = T591 + 13'h400;
  assign T591 = exp_PC >> 1'h1;
  assign T592 = T602 | T593;
  assign T593 = T599 ? expP1_PC : 14'h0;
  assign expP1_PC = T598 ? T596 : T594;
  assign T594 = {T595, 1'h1};
  assign T595 = exp_PC[4'hd:1'h1];
  assign T596 = {T597, 1'h0};
  assign T597 = expP2_PC[4'hd:1'h1];
  assign expP2_PC = exp_PC + 14'h2;
  assign T598 = exp_PC[1'h0:1'h0];
  assign T599 = T601 & T600;
  assign T600 = ~ E_E_div;
  assign T601 = ~ sqrtOp_PC;
  assign T602 = T603 ? exp_PC : 14'h0;
  assign T603 = T604 & E_E_div;
  assign T604 = ~ sqrtOp_PC;
  assign T605 = posExpX_E < 13'h401;
  assign T606 = {T608, posExpX_0001111_E};
  assign posExpX_0001111_E = T607 == 7'hf;
  assign T607 = posExpX_E[4'hc:3'h6];
  assign T608 = posExpX_0001111_E & T609;
  assign T609 = T612 | exp5X_lt_11111_E;
  assign exp5X_lt_11111_E = exp5X_lt_11000_E | exp3X_lt_111_E;
  assign exp3X_lt_111_E = T610 < 3'h7;
  assign T610 = sExpX_E[2'h2:1'h0];
  assign exp5X_lt_11000_E = T611 != 2'h3;
  assign T611 = sExpX_E[3'h4:2'h3];
  assign T612 = ~ T613;
  assign T613 = sExpX_E[3'h5:3'h5];
  assign T614 = {T626, T615};
  assign T615 = {T621, T616};
  assign T616 = posExpX_0001111_E & T617;
  assign T617 = T619 | exp5X_lt_11110_E;
  assign exp5X_lt_11110_E = exp5X_lt_11000_E | exp3X_lt_110_E;
  assign exp3X_lt_110_E = T618 < 3'h6;
  assign T618 = sExpX_E[2'h2:1'h0];
  assign T619 = ~ T620;
  assign T620 = sExpX_E[3'h5:3'h5];
  assign T621 = posExpX_0001111_E & T622;
  assign T622 = T624 | exp5X_lt_11101_E;
  assign exp5X_lt_11101_E = exp5X_lt_11000_E | exp3X_lt_101_E;
  assign exp3X_lt_101_E = T623 < 3'h5;
  assign T623 = sExpX_E[2'h2:1'h0];
  assign T624 = ~ T625;
  assign T625 = sExpX_E[3'h5:3'h5];
  assign T626 = posExpX_0001111_E & T627;
  assign T627 = T629 | exp5X_lt_11100_E;
  assign exp5X_lt_11100_E = exp5X_lt_11000_E | exp3X_lt_100_E;
  assign exp3X_lt_100_E = T628 < 3'h4;
  assign T628 = sExpX_E[2'h2:1'h0];
  assign T629 = ~ T630;
  assign T630 = sExpX_E[3'h5:3'h5];
  assign T631 = {T654, T632};
  assign T632 = {T644, T633};
  assign T633 = {T639, T634};
  assign T634 = posExpX_0001111_E & T635;
  assign T635 = T637 | exp5X_lt_11011_E;
  assign exp5X_lt_11011_E = exp5X_lt_11000_E | exp3X_lt_011_E;
  assign exp3X_lt_011_E = T636 < 3'h3;
  assign T636 = sExpX_E[2'h2:1'h0];
  assign T637 = ~ T638;
  assign T638 = sExpX_E[3'h5:3'h5];
  assign T639 = posExpX_0001111_E & T640;
  assign T640 = T642 | exp5X_lt_11010_E;
  assign exp5X_lt_11010_E = exp5X_lt_11000_E | exp3X_lt_010_E;
  assign exp3X_lt_010_E = T641 < 3'h2;
  assign T641 = sExpX_E[2'h2:1'h0];
  assign T642 = ~ T643;
  assign T643 = sExpX_E[3'h5:3'h5];
  assign T644 = {T650, T645};
  assign T645 = posExpX_0001111_E & T646;
  assign T646 = T648 | exp5X_lt_11001_E;
  assign exp5X_lt_11001_E = exp5X_lt_11000_E | exp3X_lt_001_E;
  assign exp3X_lt_001_E = T647 < 3'h1;
  assign T647 = sExpX_E[2'h2:1'h0];
  assign T648 = ~ T649;
  assign T649 = sExpX_E[3'h5:3'h5];
  assign T650 = posExpX_0001111_E & T651;
  assign T651 = T652 | exp5X_lt_11000_E;
  assign T652 = ~ T653;
  assign T653 = sExpX_E[3'h5:3'h5];
  assign T654 = {T671, T655};
  assign T655 = {T664, T656};
  assign T656 = posExpX_0001111_E & T657;
  assign T657 = T662 | exp5X_lt_10111_E;
  assign exp5X_lt_10111_E = T660 | T658;
  assign T658 = exp5X_10_E & exp3X_lt_111_E;
  assign exp5X_10_E = T659 == 2'h2;
  assign T659 = sExpX_E[3'h4:2'h3];
  assign T660 = ~ T661;
  assign T661 = sExpX_E[3'h4:3'h4];
  assign T662 = ~ T663;
  assign T663 = sExpX_E[3'h5:3'h5];
  assign T664 = posExpX_0001111_E & T665;
  assign T665 = T669 | exp5X_lt_10110_E;
  assign exp5X_lt_10110_E = T667 | T666;
  assign T666 = exp5X_10_E & exp3X_lt_110_E;
  assign T667 = ~ T668;
  assign T668 = sExpX_E[3'h4:3'h4];
  assign T669 = ~ T670;
  assign T670 = sExpX_E[3'h5:3'h5];
  assign T671 = posExpX_0001111_E & T672;
  assign T672 = T676 | exp5X_lt_10101_E;
  assign exp5X_lt_10101_E = T674 | T673;
  assign T673 = exp5X_10_E & exp3X_lt_101_E;
  assign T674 = ~ T675;
  assign T675 = sExpX_E[3'h4:3'h4];
  assign T676 = ~ T677;
  assign T677 = sExpX_E[3'h5:3'h5];
  assign T678 = {T730, T679};
  assign T679 = {T711, T680};
  assign T680 = {T696, T681};
  assign T681 = {T689, T682};
  assign T682 = posExpX_0001111_E & T683;
  assign T683 = T687 | exp5X_lt_10100_E;
  assign exp5X_lt_10100_E = T685 | T684;
  assign T684 = exp5X_10_E & exp3X_lt_100_E;
  assign T685 = ~ T686;
  assign T686 = sExpX_E[3'h4:3'h4];
  assign T687 = ~ T688;
  assign T688 = sExpX_E[3'h5:3'h5];
  assign T689 = posExpX_0001111_E & T690;
  assign T690 = T694 | exp5X_lt_10011_E;
  assign exp5X_lt_10011_E = T692 | T691;
  assign T691 = exp5X_10_E & exp3X_lt_011_E;
  assign T692 = ~ T693;
  assign T693 = sExpX_E[3'h4:3'h4];
  assign T694 = ~ T695;
  assign T695 = sExpX_E[3'h5:3'h5];
  assign T696 = {T704, T697};
  assign T697 = posExpX_0001111_E & T698;
  assign T698 = T702 | exp5X_lt_10010_E;
  assign exp5X_lt_10010_E = T700 | T699;
  assign T699 = exp5X_10_E & exp3X_lt_010_E;
  assign T700 = ~ T701;
  assign T701 = sExpX_E[3'h4:3'h4];
  assign T702 = ~ T703;
  assign T703 = sExpX_E[3'h5:3'h5];
  assign T704 = posExpX_0001111_E & T705;
  assign T705 = T709 | exp5X_lt_10001_E;
  assign exp5X_lt_10001_E = T707 | T706;
  assign T706 = exp5X_10_E & exp3X_lt_001_E;
  assign T707 = ~ T708;
  assign T708 = sExpX_E[3'h4:3'h4];
  assign T709 = ~ T710;
  assign T710 = sExpX_E[3'h5:3'h5];
  assign T711 = {T725, T712};
  assign T712 = {T718, T713};
  assign T713 = posExpX_0001111_E & T714;
  assign T714 = T716 | exp5X_lt_10000_E;
  assign exp5X_lt_10000_E = ~ T715;
  assign T715 = sExpX_E[3'h4:3'h4];
  assign T716 = ~ T717;
  assign T717 = sExpX_E[3'h5:3'h5];
  assign T718 = posExpX_0001111_E & T719;
  assign T719 = T723 | exp5X_lt_01111_E;
  assign exp5X_lt_01111_E = exp5X_00_E | T720;
  assign T720 = exp5X_01_E & exp3X_lt_111_E;
  assign exp5X_01_E = T721 == 2'h1;
  assign T721 = sExpX_E[3'h4:2'h3];
  assign exp5X_00_E = T722 == 2'h0;
  assign T722 = sExpX_E[3'h4:2'h3];
  assign T723 = ~ T724;
  assign T724 = sExpX_E[3'h5:3'h5];
  assign T725 = posExpX_0001111_E & T726;
  assign T726 = T728 | exp5X_lt_01110_E;
  assign exp5X_lt_01110_E = exp5X_00_E | T727;
  assign T727 = exp5X_01_E & exp3X_lt_110_E;
  assign T728 = ~ T729;
  assign T729 = sExpX_E[3'h5:3'h5];
  assign T730 = {T748, T731};
  assign T731 = {T743, T732};
  assign T732 = {T738, T733};
  assign T733 = posExpX_0001111_E & T734;
  assign T734 = T736 | exp5X_lt_01101_E;
  assign exp5X_lt_01101_E = exp5X_00_E | T735;
  assign T735 = exp5X_01_E & exp3X_lt_101_E;
  assign T736 = ~ T737;
  assign T737 = sExpX_E[3'h5:3'h5];
  assign T738 = posExpX_0001111_E & T739;
  assign T739 = T741 | exp5X_lt_01100_E;
  assign exp5X_lt_01100_E = exp5X_00_E | T740;
  assign T740 = exp5X_01_E & exp3X_lt_100_E;
  assign T741 = ~ T742;
  assign T742 = sExpX_E[3'h5:3'h5];
  assign T743 = posExpX_0001111_E & T744;
  assign T744 = T746 | exp5X_lt_01011_E;
  assign exp5X_lt_01011_E = exp5X_00_E | T745;
  assign T745 = exp5X_01_E & exp3X_lt_011_E;
  assign T746 = ~ T747;
  assign T747 = sExpX_E[3'h5:3'h5];
  assign T748 = {T760, T749};
  assign T749 = {T755, T750};
  assign T750 = posExpX_0001111_E & T751;
  assign T751 = T753 | exp5X_lt_01010_E;
  assign exp5X_lt_01010_E = exp5X_00_E | T752;
  assign T752 = exp5X_01_E & exp3X_lt_010_E;
  assign T753 = ~ T754;
  assign T754 = sExpX_E[3'h5:3'h5];
  assign T755 = posExpX_0001111_E & T756;
  assign T756 = T758 | exp5X_lt_01001_E;
  assign exp5X_lt_01001_E = exp5X_00_E | T757;
  assign T757 = exp5X_01_E & exp3X_lt_001_E;
  assign T758 = ~ T759;
  assign T759 = sExpX_E[3'h5:3'h5];
  assign T760 = posExpX_0001111_E & T761;
  assign T761 = T762 | exp5X_00_E;
  assign T762 = ~ T763;
  assign T763 = sExpX_E[3'h5:3'h5];
  assign T764 = {T812, T765};
  assign T765 = {T800, T766};
  assign T766 = {T786, T767};
  assign T767 = {T777, T768};
  assign T768 = {T773, T769};
  assign T769 = posExpX_0001111_E & T770;
  assign T770 = T771 | exp5X_lt_00111_E;
  assign exp5X_lt_00111_E = exp5X_00_E & exp3X_lt_111_E;
  assign T771 = ~ T772;
  assign T772 = sExpX_E[3'h5:3'h5];
  assign T773 = posExpX_0001111_E & T774;
  assign T774 = T775 | exp5X_lt_00110_E;
  assign exp5X_lt_00110_E = exp5X_00_E & exp3X_lt_110_E;
  assign T775 = ~ T776;
  assign T776 = sExpX_E[3'h5:3'h5];
  assign T777 = {T782, T778};
  assign T778 = posExpX_0001111_E & T779;
  assign T779 = T780 | exp5X_lt_00101_E;
  assign exp5X_lt_00101_E = exp5X_00_E & exp3X_lt_101_E;
  assign T780 = ~ T781;
  assign T781 = sExpX_E[3'h5:3'h5];
  assign T782 = posExpX_0001111_E & T783;
  assign T783 = T784 | exp5X_lt_00100_E;
  assign exp5X_lt_00100_E = exp5X_00_E & exp3X_lt_100_E;
  assign T784 = ~ T785;
  assign T785 = sExpX_E[3'h5:3'h5];
  assign T786 = {T796, T787};
  assign T787 = {T792, T788};
  assign T788 = posExpX_0001111_E & T789;
  assign T789 = T790 | exp5X_lt_00011_E;
  assign exp5X_lt_00011_E = exp5X_00_E & exp3X_lt_011_E;
  assign T790 = ~ T791;
  assign T791 = sExpX_E[3'h5:3'h5];
  assign T792 = posExpX_0001111_E & T793;
  assign T793 = T794 | exp5X_lt_00010_E;
  assign exp5X_lt_00010_E = exp5X_00_E & exp3X_lt_010_E;
  assign T794 = ~ T795;
  assign T795 = sExpX_E[3'h5:3'h5];
  assign T796 = posExpX_0001111_E & T797;
  assign T797 = T798 | exp5X_lt_00001_E;
  assign exp5X_lt_00001_E = exp5X_00_E & exp3X_lt_001_E;
  assign T798 = ~ T799;
  assign T799 = sExpX_E[3'h5:3'h5];
  assign T800 = {T807, T801};
  assign T801 = {T806, T802};
  assign T802 = {T805, posExpX_00011110_E};
  assign posExpX_00011110_E = posExpX_0001111_E & T803;
  assign T803 = ~ T804;
  assign T804 = posExpX_E[3'h5:3'h5];
  assign T805 = posExpX_00011110_E & exp5X_lt_11111_E;
  assign T806 = posExpX_00011110_E & exp5X_lt_11110_E;
  assign T807 = {T811, T808};
  assign T808 = {T810, T809};
  assign T809 = posExpX_00011110_E & exp5X_lt_11101_E;
  assign T810 = posExpX_00011110_E & exp5X_lt_11100_E;
  assign T811 = posExpX_00011110_E & exp5X_lt_11011_E;
  assign T812 = {T826, T813};
  assign T813 = {T821, T814};
  assign T814 = {T818, T815};
  assign T815 = {T817, T816};
  assign T816 = posExpX_00011110_E & exp5X_lt_11010_E;
  assign T817 = posExpX_00011110_E & exp5X_lt_11001_E;
  assign T818 = {T820, T819};
  assign T819 = posExpX_00011110_E & exp5X_lt_11000_E;
  assign T820 = posExpX_00011110_E & exp5X_lt_10111_E;
  assign T821 = {T825, T822};
  assign T822 = {T824, T823};
  assign T823 = posExpX_00011110_E & exp5X_lt_10110_E;
  assign T824 = posExpX_00011110_E & exp5X_lt_10101_E;
  assign T825 = posExpX_00011110_E & exp5X_lt_10100_E;
  assign T826 = {T832, T827};
  assign T827 = {T831, T828};
  assign T828 = {T830, T829};
  assign T829 = posExpX_00011110_E & exp5X_lt_10011_E;
  assign T830 = posExpX_00011110_E & exp5X_lt_10010_E;
  assign T831 = posExpX_00011110_E & exp5X_lt_10001_E;
  assign T832 = {T839, T833};
  assign T833 = {T836, posExpX_000111100_E};
  assign posExpX_000111100_E = posExpX_00011110_E & T834;
  assign T834 = ~ T835;
  assign T835 = posExpX_E[3'h4:3'h4];
  assign T836 = posExpX_000111100_E & T837;
  assign T837 = T838 < 4'hf;
  assign T838 = sExpX_E[2'h3:1'h0];
  assign T839 = posExpX_000111100_E & T840;
  assign T840 = T841 < 4'he;
  assign T841 = sExpX_E[2'h3:1'h0];
  assign T842 = ~ sigT_E;
  assign T843 = cyc_C1 ? T844 : sigT_E;
  assign T844 = sigT_C1[6'h35:1'h1];
  assign T845 = T847 | T846;
  assign T846 = ~ extraT_E;
  assign T847 = ~ isZeroRemT_E;
  assign T848 = cyc_E2 ? T849 : isZeroRemT_E;
  assign T849 = T854 & T850;
  assign T850 = T853 | T851;
  assign T851 = T852 == 2'h0;
  assign T852 = remT_E2[6'h37:6'h36];
  assign remT_E2 = io_mulAddResult_3[6'h37:1'h0];
  assign T853 = ~ sqrtOp_PC;
  assign T854 = T855 == 54'h0;
  assign T855 = remT_E2[6'h35:1'h0];
  assign cyc_E2 = T856;
  assign T856 = cycleNum_E == 3'h2;
  assign hiRoundPosBit_E1 = hiRoundPosBitT_E ^ T857;
  assign T857 = T858 & extraT_E;
  assign T858 = T859 & all1sHiRoundExtraT_E;
  assign T859 = T868 & T860;
  assign T860 = ~ trueLtX_E1;
  assign trueLtX_E1 = sqrtOp_PC ? T865 : isNegRemT_E;
  assign T861 = cyc_E2 ? T862 : isNegRemT_E;
  assign T862 = sqrtOp_PC ? T864 : T863;
  assign T863 = remT_E2[6'h35:6'h35];
  assign T864 = remT_E2[6'h37:6'h37];
  assign T865 = T867 & T866;
  assign T866 = ~ isZeroRemT_E;
  assign T867 = ~ isNegRemT_E;
  assign T868 = roundMask_E[1'h0:1'h0];
  assign hiRoundPosBitT_E = T869 != 53'h0;
  assign T869 = sigT_E & T870;
  assign T870 = incrPosMask_E >> 1'h1;
  assign incrPosMask_E = T872 & T871;
  assign T871 = {roundMask_E, 1'h1};
  assign T872 = ~ T873;
  assign T873 = {1'h0, roundMask_E};
  assign T874 = overflow_E1 | underflow_E1;
  assign underflow_E1 = normalCase_PC & underflowY_E1;
  assign underflowY_E1 = totalUnderflowY_E1 | T875;
  assign T875 = T876 & inexactY_E1;
  assign T876 = posExpX_E <= 13'h401;
  assign totalUnderflowY_E1 = T944 | T877;
  assign T877 = T878 < 13'h3ce;
  assign T878 = sExpY_E1[4'hc:1'h0];
  assign sExpY_E1 = T928 | T1098;
  assign T1098 = {1'h0, T879};
  assign T879 = T882 ? T880 : 13'h0;
  assign T880 = T881 + 13'h400;
  assign T881 = expP2_PC >> 1'h1;
  assign T882 = T883 & sqrtOp_PC;
  assign T883 = sigY_E1[6'h35:6'h35];
  assign sigY_E1 = T893 & T884;
  assign T884 = ~ roundEvenMask_E1;
  assign roundEvenMask_E1 = T885 ? incrPosMask_E : 54'h0;
  assign T885 = T887 & T886;
  assign T886 = ~ anyRoundExtra_E1;
  assign T887 = roundingMode_near_even_PC & hiRoundPosBit_E1;
  assign roundingMode_near_even_PC = roundingMode_PC == 2'h0;
  assign T888 = entering_PC ? T889 : roundingMode_PC;
  assign T889 = valid_PB ? roundingMode_PB : io_roundingMode;
  assign T890 = entering_PB ? T891 : roundingMode_PB;
  assign T891 = valid_PA ? roundingMode_PA : io_roundingMode;
  assign T892 = entering_PA ? io_roundingMode : roundingMode_PA;
  assign T893 = T899 ? sigY1_E : sigY0_E;
  assign sigY0_E = sigAdjT_E & T894;
  assign T894 = {1'h1, T895};
  assign T895 = ~ roundMask_E;
  assign sigAdjT_E = T896 + T1099;
  assign T1099 = {53'h0, roundMagUp_PC};
  assign roundMagUp_PC = sign_PC ? roundingMode_min_PC : roundingMode_max_PC;
  assign roundingMode_max_PC = roundingMode_PC == 2'h3;
  assign roundingMode_min_PC = roundingMode_PC == 2'h2;
  assign T896 = 54'h0 + T1100;
  assign T1100 = {1'h0, sigT_E};
  assign sigY1_E = T897 + 54'h1;
  assign T897 = sigAdjT_E | T898;
  assign T898 = {1'h0, roundMask_E};
  assign T899 = T911 | T900;
  assign T900 = roundingMode_near_even_PC & T901;
  assign T901 = T905 | T902;
  assign T902 = T903 & all1sHiRoundExtraT_E;
  assign T903 = extraT_E & T904;
  assign T904 = ~ trueLtX_E1;
  assign T905 = hiRoundPosBitT_E | T906;
  assign T906 = T909 & T907;
  assign T907 = ~ T908;
  assign T908 = roundMask_E[1'h0:1'h0];
  assign T909 = extraT_E | T910;
  assign T910 = ~ trueLtX_E1;
  assign T911 = T922 | T912;
  assign T912 = roundMagUp_PC & T913;
  assign T913 = T918 | T914;
  assign T914 = ~ all1sHiRoundT_E;
  assign all1sHiRoundT_E = T915 & all1sHiRoundExtraT_E;
  assign T915 = T916 | hiRoundPosBitT_E;
  assign T916 = ~ T917;
  assign T917 = roundMask_E[1'h0:1'h0];
  assign T918 = T920 & T919;
  assign T919 = ~ isZeroRemT_E;
  assign T920 = extraT_E & T921;
  assign T921 = ~ trueLtX_E1;
  assign T922 = T923 & all1sHiRoundT_E;
  assign T923 = T925 & T924;
  assign T924 = ~ trueLtX_E1;
  assign T925 = roundMagDown_PC & extraT_E;
  assign roundMagDown_PC = T927 & T926;
  assign T926 = ~ roundingMode_near_even_PC;
  assign T927 = ~ roundMagUp_PC;
  assign T928 = T935 | T929;
  assign T929 = T930 ? expP2_PC : 14'h0;
  assign T930 = T932 & T931;
  assign T931 = ~ E_E_div;
  assign T932 = T934 & T933;
  assign T933 = ~ sqrtOp_PC;
  assign T934 = sigY_E1[6'h35:6'h35];
  assign T935 = T941 | T936;
  assign T936 = T937 ? expP1_PC : 14'h0;
  assign T937 = T938 & E_E_div;
  assign T938 = T940 & T939;
  assign T939 = ~ sqrtOp_PC;
  assign T940 = sigY_E1[6'h35:6'h35];
  assign T941 = T942 ? sExpX_E : 14'h0;
  assign T942 = ~ T943;
  assign T943 = sigY_E1[6'h35:6'h35];
  assign T944 = sExpY_E1[4'hd:4'hd];
  assign overflow_E1 = normalCase_PC & overflowY_E1;
  assign overflowY_E1 = T947 & T945;
  assign T945 = 3'h3 <= T946;
  assign T946 = sExpY_E1[4'hc:4'ha];
  assign T947 = ~ T948;
  assign T948 = sExpY_E1[4'hd:4'hd];
  assign T949 = {invalid_PC, infinity_PC};
  assign infinity_PC = T950 & isZeroB_PC;
  assign T950 = T952 & T951;
  assign T951 = ~ isZeroA_PC;
  assign T952 = T954 & T953;
  assign T953 = ~ isSpecialA_PC;
  assign T954 = ~ sqrtOp_PC;
  assign invalid_PC = T967 | notSigNaN_invalid_PC;
  assign notSigNaN_invalid_PC = sqrtOp_PC ? T962 : T955;
  assign T955 = T961 | T956;
  assign T956 = isInfA_PC & isInfB_PC;
  assign isInfB_PC = isSpecialB_PC & T957;
  assign T957 = ~ T958;
  assign T958 = specialCodeB_PC[1'h0:1'h0];
  assign isInfA_PC = isSpecialA_PC & T959;
  assign T959 = ~ T960;
  assign T960 = specialCodeA_PC[1'h0:1'h0];
  assign T961 = isZeroA_PC & isZeroB_PC;
  assign T962 = T963 & sign_PC;
  assign T963 = T965 & T964;
  assign T964 = ~ isZeroB_PC;
  assign T965 = ~ isNaNB_PC;
  assign isNaNB_PC = isSpecialB_PC & T966;
  assign T966 = specialCodeB_PC[1'h0:1'h0];
  assign T967 = T969 | isSigNaNB_PC;
  assign isSigNaNB_PC = isNaNB_PC & T968;
  assign T968 = ~ fractB_51_PC;
  assign T969 = T978 & isSigNaNA_PC;
  assign isSigNaNA_PC = isNaNA_PC & T970;
  assign T970 = ~ fractA_51_PC;
  assign T971 = entering_PC ? T972 : fractA_51_PC;
  assign T972 = valid_PB ? fractA_51_PB : T973;
  assign T973 = fractA_S[6'h33:6'h33];
  assign T974 = entering_PB ? T975 : fractA_51_PB;
  assign T975 = valid_PA ? fractA_51_PA : T976;
  assign T976 = fractA_S[6'h33:6'h33];
  assign isNaNA_PC = isSpecialA_PC & T977;
  assign T977 = specialCodeA_PC[1'h0:1'h0];
  assign T978 = ~ sqrtOp_PC;
  assign io_out = T979;
  assign T979 = {signOut_PC, T980};
  assign T980 = {expOut_E1, fractOut_E1};
  assign fractOut_E1 = T987 | T981;
  assign T981 = T982 ? 52'hfffffffffffff : 52'h0;
  assign T982 = isNaNOut_PC | pegMaxFiniteMagOut_E1;
  assign pegMaxFiniteMagOut_E1 = overflow_E1 & T983;
  assign T983 = ~ overflowY_roundMagUp_PC;
  assign overflowY_roundMagUp_PC = roundingMode_near_even_PC | roundMagUp_PC;
  assign isNaNOut_PC = T984 | notSigNaN_invalid_PC;
  assign T984 = T985 | isNaNB_PC;
  assign T985 = T986 & isNaNA_PC;
  assign T986 = ~ sqrtOp_PC;
  assign T987 = T988 ? 52'h0 : fractY_E1;
  assign fractY_E1 = sigY_E1[6'h33:1'h0];
  assign T988 = totalUnderflowY_E1 & roundMagUp_PC;
  assign expOut_E1 = T990 | T989;
  assign T989 = isNaNOut_PC ? 12'he00 : 12'h0;
  assign T990 = T995 | T991;
  assign T991 = notNaN_isInfOut_E1 ? 12'hc00 : 12'h0;
  assign notNaN_isInfOut_E1 = sqrtOp_PC ? isInfB_PC : T992;
  assign T992 = T994 | T993;
  assign T993 = overflow_E1 & overflowY_roundMagUp_PC;
  assign T994 = isInfA_PC | isZeroB_PC;
  assign T995 = T997 | T996;
  assign T996 = pegMaxFiniteMagOut_E1 ? 12'hbff : 12'h0;
  assign T997 = T1000 | T998;
  assign T998 = pegMinFiniteMagOut_E1 ? 12'h3ce : 12'h0;
  assign pegMinFiniteMagOut_E1 = T999 & roundMagUp_PC;
  assign T999 = normalCase_PC & totalUnderflowY_E1;
  assign T1000 = T1003 & T1001;
  assign T1001 = ~ T1002;
  assign T1002 = notNaN_isInfOut_E1 ? 12'h200 : 12'h0;
  assign T1003 = T1006 & T1004;
  assign T1004 = ~ T1005;
  assign T1005 = pegMaxFiniteMagOut_E1 ? 12'h400 : 12'h0;
  assign T1006 = T1009 & T1007;
  assign T1007 = ~ T1008;
  assign T1008 = pegMinFiniteMagOut_E1 ? 12'hc31 : 12'h0;
  assign T1009 = expY_E1 & T1010;
  assign T1010 = ~ T1011;
  assign T1011 = notSpecial_isZeroOut_E1 ? 12'he00 : 12'h0;
  assign notSpecial_isZeroOut_E1 = sqrtOp_PC ? isZeroB_PC : T1012;
  assign T1012 = T1015 | T1013;
  assign T1013 = totalUnderflowY_E1 & T1014;
  assign T1014 = ~ roundMagUp_PC;
  assign T1015 = isZeroA_PC | isInfB_PC;
  assign expY_E1 = sExpY_E1[4'hb:1'h0];
  assign signOut_PC = isNaNOut_PC | T1016;
  assign T1016 = sqrtOp_PC ? T1017 : sign_PC;
  assign T1017 = isZeroB_PC & sign_PC;
  assign io_outValid_sqrt = T1018;
  assign T1018 = leaving_PC & sqrtOp_PC;
  assign io_outValid_div = T1019;
  assign T1019 = leaving_PC & T1020;
  assign T1020 = ~ sqrtOp_PC;
  assign io_inReady_sqrt = T1021;
  assign T1021 = T1023 & T1022;
  assign T1022 = ~ cyc_B1_sqrt;
  assign T1023 = T1025 & T1024;
  assign T1024 = ~ cyc_B2_div;
  assign T1025 = T1027 & T1026;
  assign T1026 = ~ cyc_B4_sqrt;
  assign T1027 = T1029 & T1028;
  assign T1028 = ~ cyc_B5_sqrt;
  assign T1029 = ready_PA & T1030;
  assign T1030 = ~ cyc_B6_sqrt;
  assign ready_PA = T1031;
  assign T1031 = T1032 | valid_leaving_PA;
  assign T1032 = ~ valid_PA;
  assign io_inReady_div = T1033;
  assign T1033 = T1035 & T1034;
  assign T1034 = ~ cyc_C4;
  assign T1035 = T1037 & T1036;
  assign T1036 = ~ cyc_C5;
  assign T1037 = T1039 & T1038;
  assign T1038 = ~ cyc_B1_sqrt;
  assign T1039 = T1041 & T1040;
  assign T1040 = ~ cyc_B2;
  assign T1041 = T1043 & T1042;
  assign T1042 = ~ cyc_B3;
  assign T1043 = T1045 & T1044;
  assign T1044 = ~ cyc_B4_sqrt;
  assign T1045 = T1047 & T1046;
  assign T1046 = ~ cyc_B5_sqrt;
  assign T1047 = ready_PA & T1048;
  assign T1048 = ~ cyc_B6_sqrt;

  always @(posedge clk) begin
    if(cyc_C1) begin
      extraT_E <= T7;
    end
    if(entering_PC) begin
      sqrtOp_PC <= T17;
    end
    if(entering_PB) begin
      sqrtOp_PB <= T19;
    end
    if(entering_PA) begin
      sqrtOp_PA <= io_sqrtOp;
    end
    if(reset) begin
      cycleNum_E <= 3'h0;
    end else if(T30) begin
      cycleNum_E <= T28;
    end
    if(entering_PC) begin
      specialCodeB_PC <= T36;
    end
    if(entering_PB) begin
      specialCodeB_PB <= T38;
    end
    if(entering_PA) begin
      specialCodeB_PA <= specialCodeB_S;
    end
    if(entering_PC) begin
      specialCodeA_PC <= T43;
    end
    if(entering_PB) begin
      specialCodeA_PB <= T45;
    end
    if(T47) begin
      specialCodeA_PA <= specialCodeA_S;
    end
    if(entering_PC) begin
      sign_PC <= T57;
    end
    if(entering_PB) begin
      sign_PB <= T60;
    end
    if(entering_PA) begin
      sign_PA <= sign_S;
    end
    if(reset) begin
      valid_PC <= 1'h0;
    end else if(T67) begin
      valid_PC <= entering_PC;
    end
    if(reset) begin
      cycleNum_C <= 3'h0;
    end else if(T106) begin
      cycleNum_C <= T71;
    end
    if(reset) begin
      cycleNum_B <= 4'h0;
    end else if(T104) begin
      cycleNum_B <= T76;
    end
    if(reset) begin
      cycleNum_A <= 3'h0;
    end else if(T102) begin
      cycleNum_A <= T80;
    end
    if(reset) begin
      valid_PA <= 1'h0;
    end else if(T124) begin
      valid_PA <= entering_PA;
    end
    if(reset) begin
      valid_PB <= 1'h0;
    end else if(T155) begin
      valid_PB <= entering_PB;
    end
    if(entering_PC_normalCase) begin
      fractB_other_PC <= fractB_other_PB;
    end
    if(entering_PB_normalCase) begin
      fractB_other_PB <= fractB_other_PA;
    end
    if(entering_PA_normalCase) begin
      fractB_other_PA <= T176;
    end
    if(entering_PC) begin
      fractB_51_PC <= T180;
    end
    if(entering_PB) begin
      fractB_51_PB <= T183;
    end
    if(entering_PA) begin
      fractB_51_PA <= T186;
    end
    if(entering_PC_normalCase) begin
      exp_PC <= exp_PB;
    end
    if(entering_PB_normalCase) begin
      exp_PB <= exp_PA;
    end
    if(entering_PA_normalCase) begin
      exp_PA <= T196;
    end
    if(entering_PC_normalCase) begin
      fractA_0_PC <= fractA_0_PB;
    end
    if(entering_PB_normalCase) begin
      fractA_0_PB <= T209;
    end
    if(cyc_A4_div) begin
      fractA_other_PA <= T211;
    end
    if(cyc_C1) begin
      E_E_div <= E_C1_div;
    end
    if(T221) begin
      sigXN_C <= sigXNU_B3_CX;
    end
    if(cyc_B3) begin
      sigX1_B <= sigXNU_B3_CX;
    end
    if(cyc_B1) begin
      sqrSigma1_C <= sqrSigma1_B1;
    end
    if(cyc_A1_sqrt) begin
      ER1_B_sqrt <= ER1_A1_sqrt;
    end
    if(T269) begin
      fractR0_A <= T258;
    end
    if(T280) begin
      partNegSigma0_A <= T277;
    end
    hiSqrR0_A_sqrt <= T1071;
    if(T403) begin
      nextMulAdd9B_A <= T390;
    end
    nextMulAdd9A_A <= T1081;
    if(cyc_B8_sqrt) begin
      ESqrR1_B_sqrt <= ESqrR1_B8_sqrt;
    end
    if(cyc_C5_sqrt) begin
      u_C_sqrt <= T493;
    end
    if(T47) begin
      fractA_51_PA <= T509;
    end
    if(cyc_C1) begin
      sigT_E <= T844;
    end
    if(cyc_E2) begin
      isZeroRemT_E <= T849;
    end
    if(cyc_E2) begin
      isNegRemT_E <= T862;
    end
    if(entering_PC) begin
      roundingMode_PC <= T889;
    end
    if(entering_PB) begin
      roundingMode_PB <= T891;
    end
    if(entering_PA) begin
      roundingMode_PA <= io_roundingMode;
    end
    if(entering_PC) begin
      fractA_51_PC <= T972;
    end
    if(entering_PB) begin
      fractA_51_PB <= T975;
    end
  end
endmodule

module mul54(input clk,
    input  io_val_s0,
    input  io_latch_a_s0,
    input [53:0] io_a_s0,
    input  io_latch_b_s0,
    input [53:0] io_b_s0,
    input [104:0] io_c_s2,
    output[104:0] io_result_s3
);

  reg [104:0] reg_result_s3;
  wire[104:0] T0;
  wire[104:0] T1;
  wire[104:0] T2;
  wire[107:0] T3;
  reg [53:0] reg_b_s2;
  wire[53:0] T4;
  reg [53:0] reg_b_s1;
  wire[53:0] T5;
  wire T6;
  reg  val_s1;
  reg [53:0] reg_a_s2;
  wire[53:0] T7;
  reg [53:0] reg_a_s1;
  wire[53:0] T8;
  wire T9;
  reg  val_s2;

`ifndef SYNTHESIS
// synthesis translate_off
  integer initvar;
  initial begin
    #0.002;
    reg_result_s3 = {4{$random}};
    reg_b_s2 = {2{$random}};
    reg_b_s1 = {2{$random}};
    val_s1 = {1{$random}};
    reg_a_s2 = {2{$random}};
    reg_a_s1 = {2{$random}};
    val_s2 = {1{$random}};
  end
// synthesis translate_on
`endif

  assign io_result_s3 = reg_result_s3;
  assign T0 = val_s2 ? T1 : reg_result_s3;
  assign T1 = T2 + io_c_s2;
  assign T2 = T3[7'h68:1'h0];
  assign T3 = reg_a_s2 * reg_b_s2;
  assign T4 = val_s1 ? reg_b_s1 : reg_b_s2;
  assign T5 = T6 ? io_b_s0 : reg_b_s1;
  assign T6 = io_val_s0 & io_latch_b_s0;
  assign T7 = val_s1 ? reg_a_s1 : reg_a_s2;
  assign T8 = T9 ? io_a_s0 : reg_a_s1;
  assign T9 = io_val_s0 & io_latch_a_s0;

  always @(posedge clk) begin
    if(val_s2) begin
      reg_result_s3 <= T1;
    end
    if(val_s1) begin
      reg_b_s2 <= reg_b_s1;
    end
    if(T6) begin
      reg_b_s1 <= io_b_s0;
    end
    val_s1 <= io_val_s0;
    if(val_s1) begin
      reg_a_s2 <= reg_a_s1;
    end
    if(T9) begin
      reg_a_s1 <= io_a_s0;
    end
    val_s2 <= val_s1;
  end
endmodule

module divSqrtRecodedFloat64(input clk, input reset,
    output io_inReady_div,
    output io_inReady_sqrt,
    input  io_inValid,
    input  io_sqrtOp,
    input [64:0] io_a,
    input [64:0] io_b,
    input [1:0] io_roundingMode,
    output io_outValid_div,
    output io_outValid_sqrt,
    output[64:0] io_out,
    output[4:0] io_exceptionFlags
);

  wire T0;
  wire ds_io_inReady_div;
  wire ds_io_inReady_sqrt;
  wire ds_io_outValid_div;
  wire ds_io_outValid_sqrt;
  wire[64:0] ds_io_out;
  wire[4:0] ds_io_exceptionFlags;
  wire[3:0] ds_io_usingMulAdd;
  wire ds_io_latchMulAddA_0;
  wire[53:0] ds_io_mulAddA_0;
  wire ds_io_latchMulAddB_0;
  wire[53:0] ds_io_mulAddB_0;
  wire[104:0] ds_io_mulAddC_2;
  wire[104:0] mul_io_result_s3;


  assign T0 = ds_io_usingMulAdd[1'h0:1'h0];
  assign io_exceptionFlags = ds_io_exceptionFlags;
  assign io_out = ds_io_out;
  assign io_outValid_sqrt = ds_io_outValid_sqrt;
  assign io_outValid_div = ds_io_outValid_div;
  assign io_inReady_sqrt = ds_io_inReady_sqrt;
  assign io_inReady_div = ds_io_inReady_div;
  divSqrtRecodedFloat64_mulAddZ31 ds(.clk(clk), .reset(reset),
       .io_inReady_div( ds_io_inReady_div ),
       .io_inReady_sqrt( ds_io_inReady_sqrt ),
       .io_inValid( io_inValid ),
       .io_sqrtOp( io_sqrtOp ),
       .io_a( io_a ),
       .io_b( io_b ),
       .io_roundingMode( io_roundingMode ),
       .io_outValid_div( ds_io_outValid_div ),
       .io_outValid_sqrt( ds_io_outValid_sqrt ),
       .io_out( ds_io_out ),
       .io_exceptionFlags( ds_io_exceptionFlags ),
       .io_usingMulAdd( ds_io_usingMulAdd ),
       .io_latchMulAddA_0( ds_io_latchMulAddA_0 ),
       .io_mulAddA_0( ds_io_mulAddA_0 ),
       .io_latchMulAddB_0( ds_io_latchMulAddB_0 ),
       .io_mulAddB_0( ds_io_mulAddB_0 ),
       .io_mulAddC_2( ds_io_mulAddC_2 ),
       .io_mulAddResult_3( mul_io_result_s3 )
  );
  mul54 mul(.clk(clk),
       .io_val_s0( T0 ),
       .io_latch_a_s0( ds_io_latchMulAddA_0 ),
       .io_a_s0( ds_io_mulAddA_0 ),
       .io_latch_b_s0( ds_io_latchMulAddB_0 ),
       .io_b_s0( ds_io_mulAddB_0 ),
       .io_c_s2( ds_io_mulAddC_2 ),
       .io_result_s3( mul_io_result_s3 )
  );
endmodule

